
TrykkplaatBdot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a8  080049a8  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080049a8  080049a8  000059a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049b0  080049b0  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049b4  080049b4  000059b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080049b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08004a20  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004a20  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a18d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9d  00000000  00000000  00010225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  00011fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000852  00000000  00000000  00012b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021660  00000000  00000000  00013352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b36c  00000000  00000000  000349b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c452f  00000000  00000000  0003fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010424d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003448  00000000  00000000  00104290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001076d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800488c 	.word	0x0800488c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800488c 	.word	0x0800488c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800027a:	4b12      	ldr	r3, [pc, #72]	@ (80002c4 <BSP_SPI1_Init+0x54>)
 800027c:	4a12      	ldr	r2, [pc, #72]	@ (80002c8 <BSP_SPI1_Init+0x58>)
 800027e:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000280:	4b12      	ldr	r3, [pc, #72]	@ (80002cc <BSP_SPI1_Init+0x5c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	4911      	ldr	r1, [pc, #68]	@ (80002cc <BSP_SPI1_Init+0x5c>)
 8000288:	600a      	str	r2, [r1, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d114      	bne.n	80002b8 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800028e:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <BSP_SPI1_Init+0x54>)
 8000290:	f003 f9a6 	bl	80035e0 <HAL_SPI_GetState>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d10e      	bne.n	80002b8 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800029a:	480a      	ldr	r0, [pc, #40]	@ (80002c4 <BSP_SPI1_Init+0x54>)
 800029c:	f000 f85a 	bl	8000354 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d108      	bne.n	80002b8 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80002a6:	4807      	ldr	r0, [pc, #28]	@ (80002c4 <BSP_SPI1_Init+0x54>)
 80002a8:	f000 f812 	bl	80002d0 <MX_SPI1_Init>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d002      	beq.n	80002b8 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80002b2:	f06f 0307 	mvn.w	r3, #7
 80002b6:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80002b8:	687b      	ldr	r3, [r7, #4]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3708      	adds	r7, #8
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000084 	.word	0x20000084
 80002c8:	40013000 	.word	0x40013000
 80002cc:	200000e8 	.word	0x200000e8

080002d0 <MX_SPI1_Init>:
}

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80002d8:	2300      	movs	r3, #0
 80002da:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a1c      	ldr	r2, [pc, #112]	@ (8000350 <MX_SPI1_Init+0x80>)
 80002e0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002e8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80002f6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800030a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2218      	movs	r2, #24
 8000310:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2200      	movs	r2, #0
 8000316:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	2200      	movs	r2, #0
 8000322:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	2207      	movs	r2, #7
 8000328:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2208      	movs	r2, #8
 8000334:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000336:	6878      	ldr	r0, [r7, #4]
 8000338:	f002 fbd8 	bl	8002aec <HAL_SPI_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000342:	2301      	movs	r3, #1
 8000344:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000346:	7bfb      	ldrb	r3, [r7, #15]
}
 8000348:	4618      	mov	r0, r3
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40013000 	.word	0x40013000

08000354 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b08a      	sub	sp, #40	@ 0x28
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800035c:	4b27      	ldr	r3, [pc, #156]	@ (80003fc <SPI1_MspInit+0xa8>)
 800035e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000360:	4a26      	ldr	r2, [pc, #152]	@ (80003fc <SPI1_MspInit+0xa8>)
 8000362:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000366:	6613      	str	r3, [r2, #96]	@ 0x60
 8000368:	4b24      	ldr	r3, [pc, #144]	@ (80003fc <SPI1_MspInit+0xa8>)
 800036a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800036c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000370:	613b      	str	r3, [r7, #16]
 8000372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000374:	4b21      	ldr	r3, [pc, #132]	@ (80003fc <SPI1_MspInit+0xa8>)
 8000376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000378:	4a20      	ldr	r2, [pc, #128]	@ (80003fc <SPI1_MspInit+0xa8>)
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000380:	4b1e      	ldr	r3, [pc, #120]	@ (80003fc <SPI1_MspInit+0xa8>)
 8000382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000384:	f003 0301 	and.w	r3, r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800038c:	2320      	movs	r3, #32
 800038e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000390:	2302      	movs	r3, #2
 8000392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000398:	2303      	movs	r3, #3
 800039a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800039c:	2305      	movs	r3, #5
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 80003a0:	f107 0314 	add.w	r3, r7, #20
 80003a4:	4619      	mov	r1, r3
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f001 fb8f 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80003ae:	2340      	movs	r3, #64	@ 0x40
 80003b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003ba:	2303      	movs	r3, #3
 80003bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80003be:	2305      	movs	r3, #5
 80003c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003cc:	f001 fb7e 	bl	8001acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80003d0:	2380      	movs	r3, #128	@ 0x80
 80003d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d4:	2302      	movs	r3, #2
 80003d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003dc:	2303      	movs	r3, #3
 80003de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80003e0:	2305      	movs	r3, #5
 80003e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80003e4:	f107 0314 	add.w	r3, r7, #20
 80003e8:	4619      	mov	r1, r3
 80003ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ee:	f001 fb6d 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 80003f2:	bf00      	nop
 80003f4:	3728      	adds	r7, #40	@ 0x28
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <LIS3MDL_DummyInit>:
int32_t LIS3MDL_DummyDeInit(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t LIS3MDL_DummyInit(void) {
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
    return LIS3MDL_OK;
 8000404:	2300      	movs	r3, #0
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <LIS3MDL_DummyDeInit>:

int32_t LIS3MDL_DummyDeInit(void) {
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    return LIS3MDL_OK;
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <LIS3MDL_CS_Select>:

void LIS3MDL_CS_Select(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LIS3MDL_CS_GPIO_Port, LIS3MDLTR_CS_Pin, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2110      	movs	r1, #16
 8000428:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800042c:	f001 fcc8 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 8000430:	bf00      	nop
 8000432:	bd80      	pop	{r7, pc}

08000434 <LIS3MDL_CS_Deselect>:

void LIS3MDL_CS_Deselect(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LIS3MDL_CS_GPIO_Port, LIS3MDLTR_CS_Pin, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2110      	movs	r1, #16
 800043c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000440:	f001 fcbe 	bl	8001dc0 <HAL_GPIO_WritePin>
}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}

08000448 <Write_LIS3MDL>:

int32_t Write_LIS3MDL(void *handle, uint8_t reg, uint8_t *data, uint16_t len) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	607a      	str	r2, [r7, #4]
 8000452:	461a      	mov	r2, r3
 8000454:	460b      	mov	r3, r1
 8000456:	72fb      	strb	r3, [r7, #11]
 8000458:	4613      	mov	r3, r2
 800045a:	813b      	strh	r3, [r7, #8]
    SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)handle; // Correct cast
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	617b      	str	r3, [r7, #20]
    reg |= 0x40; // Multi-write bit
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000466:	b2db      	uxtb	r3, r3
 8000468:	72fb      	strb	r3, [r7, #11]
    LIS3MDL_CS_Select();
 800046a:	f7ff ffd9 	bl	8000420 <LIS3MDL_CS_Select>
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 800046e:	f107 010b 	add.w	r1, r7, #11
 8000472:	f04f 33ff 	mov.w	r3, #4294967295
 8000476:	2201      	movs	r2, #1
 8000478:	6978      	ldr	r0, [r7, #20]
 800047a:	f002 fbe4 	bl	8002c46 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(hspi, data, len, HAL_MAX_DELAY);
 800047e:	893a      	ldrh	r2, [r7, #8]
 8000480:	f04f 33ff 	mov.w	r3, #4294967295
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	6978      	ldr	r0, [r7, #20]
 8000488:	f002 fbdd 	bl	8002c46 <HAL_SPI_Transmit>
    LIS3MDL_CS_Deselect();
 800048c:	f7ff ffd2 	bl	8000434 <LIS3MDL_CS_Deselect>
    return LIS3MDL_OK;
 8000490:	2300      	movs	r3, #0
}
 8000492:	4618      	mov	r0, r3
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <Read_LIS3MDL>:

int32_t Read_LIS3MDL(void *handle, uint8_t reg, uint8_t *data, uint16_t len) {
 800049a:	b580      	push	{r7, lr}
 800049c:	b086      	sub	sp, #24
 800049e:	af00      	add	r7, sp, #0
 80004a0:	60f8      	str	r0, [r7, #12]
 80004a2:	607a      	str	r2, [r7, #4]
 80004a4:	461a      	mov	r2, r3
 80004a6:	460b      	mov	r3, r1
 80004a8:	72fb      	strb	r3, [r7, #11]
 80004aa:	4613      	mov	r3, r2
 80004ac:	813b      	strh	r3, [r7, #8]
    SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)handle; // Correct cast
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	617b      	str	r3, [r7, #20]
    reg |= 0x80 | 0x40; // Multi-read bit
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	72fb      	strb	r3, [r7, #11]
    LIS3MDL_CS_Select();
 80004bc:	f7ff ffb0 	bl	8000420 <LIS3MDL_CS_Select>
    HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 80004c0:	f107 010b 	add.w	r1, r7, #11
 80004c4:	f04f 33ff 	mov.w	r3, #4294967295
 80004c8:	2201      	movs	r2, #1
 80004ca:	6978      	ldr	r0, [r7, #20]
 80004cc:	f002 fbbb 	bl	8002c46 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, data, len, HAL_MAX_DELAY);
 80004d0:	893a      	ldrh	r2, [r7, #8]
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	6978      	ldr	r0, [r7, #20]
 80004da:	f002 fd2a 	bl	8002f32 <HAL_SPI_Receive>
    LIS3MDL_CS_Deselect();
 80004de:	f7ff ffa9 	bl	8000434 <LIS3MDL_CS_Deselect>
    return LIS3MDL_OK;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b094      	sub	sp, #80	@ 0x50
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f001 f96c 	bl	80017ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f9bb 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 fa0b 	bl	8000914 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_SPI1_Init();
 80004fe:	f7ff feb7 	bl	8000270 <BSP_SPI1_Init>
  //Debug muutujad
  uint8_t id;              // WHO_AM_I
  uint8_t ctrl_reg1_value;
  printf("----------Starting SPI Magnetometer on SPI1------------\r\n");
 8000502:	48bb      	ldr	r0, [pc, #748]	@ (80007f0 <main+0x304>)
 8000504:	f003 fb60 	bl	8003bc8 <puts>

  LIS3MDL_IO_t io_local; //I/O init
  io_local.BusType = LIS3MDL_SPI_4WIRES_BUS;
 8000508:	2301      	movs	r3, #1
 800050a:	62bb      	str	r3, [r7, #40]	@ 0x28
  io_local.Address = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  io_local.WriteReg = (LIS3MDL_WriteReg_Func)Write_LIS3MDL;
 8000512:	4bb8      	ldr	r3, [pc, #736]	@ (80007f4 <main+0x308>)
 8000514:	633b      	str	r3, [r7, #48]	@ 0x30
  io_local.ReadReg = (LIS3MDL_ReadReg_Func)Read_LIS3MDL;
 8000516:	4bb8      	ldr	r3, [pc, #736]	@ (80007f8 <main+0x30c>)
 8000518:	637b      	str	r3, [r7, #52]	@ 0x34
  io_local.GetTick = (LIS3MDL_GetTick_Func)HAL_GetTick;
 800051a:	4bb8      	ldr	r3, [pc, #736]	@ (80007fc <main+0x310>)
 800051c:	63bb      	str	r3, [r7, #56]	@ 0x38
  io_local.Delay = HAL_Delay;
 800051e:	4bb8      	ldr	r3, [pc, #736]	@ (8000800 <main+0x314>)
 8000520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_local.Init = LIS3MDL_DummyInit; //Suvalised peibutisfunktsioonid, ei tohiks muuta sensori toimimist
 8000522:	4bb8      	ldr	r3, [pc, #736]	@ (8000804 <main+0x318>)
 8000524:	623b      	str	r3, [r7, #32]
  io_local.DeInit = LIS3MDL_DummyDeInit;// kuid vahepeal oli probleeme IO busi registreerimisega
 8000526:	4bb8      	ldr	r3, [pc, #736]	@ (8000808 <main+0x31c>)
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24

  lis3mdl.IO = io_local; // Assign the local io struct
 800052a:	4bb8      	ldr	r3, [pc, #736]	@ (800080c <main+0x320>)
 800052c:	461d      	mov	r5, r3
 800052e:	f107 0420 	add.w	r4, r7, #32
 8000532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000536:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800053a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  if (LIS3MDL_RegisterBusIO(&lis3mdl, &io_local) != LIS3MDL_OK) {
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	4619      	mov	r1, r3
 8000544:	48b1      	ldr	r0, [pc, #708]	@ (800080c <main+0x320>)
 8000546:	f000 fb8d 	bl	8000c64 <LIS3MDL_RegisterBusIO>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d004      	beq.n	800055a <main+0x6e>
	  heartbeat = 1; // Error in registering bus I/O
 8000550:	4baf      	ldr	r3, [pc, #700]	@ (8000810 <main+0x324>)
 8000552:	2201      	movs	r2, #1
 8000554:	801a      	strh	r2, [r3, #0]
	  Error_Handler();
 8000556:	f000 fa41 	bl	80009dc <Error_Handler>
  }

  lis3mdl.Ctx.handle = &hspi1;
 800055a:	4bac      	ldr	r3, [pc, #688]	@ (800080c <main+0x320>)
 800055c:	4aad      	ldr	r2, [pc, #692]	@ (8000814 <main+0x328>)
 800055e:	62da      	str	r2, [r3, #44]	@ 0x2c
  lis3mdl.Ctx.write_reg = Write_LIS3MDL;
 8000560:	4baa      	ldr	r3, [pc, #680]	@ (800080c <main+0x320>)
 8000562:	4aa4      	ldr	r2, [pc, #656]	@ (80007f4 <main+0x308>)
 8000564:	621a      	str	r2, [r3, #32]
  lis3mdl.Ctx.read_reg = Read_LIS3MDL;
 8000566:	4ba9      	ldr	r3, [pc, #676]	@ (800080c <main+0x320>)
 8000568:	4aa3      	ldr	r2, [pc, #652]	@ (80007f8 <main+0x30c>)
 800056a:	625a      	str	r2, [r3, #36]	@ 0x24
  lis3mdl.Ctx.mdelay = HAL_Delay;
 800056c:	4ba7      	ldr	r3, [pc, #668]	@ (800080c <main+0x320>)
 800056e:	4aa4      	ldr	r2, [pc, #656]	@ (8000800 <main+0x314>)
 8000570:	629a      	str	r2, [r3, #40]	@ 0x28

  // Attempt WHO_AM_I read after successful registration
  if (LIS3MDL_ReadID(&lis3mdl, &id) == LIS3MDL_OK) {
 8000572:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 8000576:	4619      	mov	r1, r3
 8000578:	48a4      	ldr	r0, [pc, #656]	@ (800080c <main+0x320>)
 800057a:	f000 fc19 	bl	8000db0 <LIS3MDL_ReadID>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10f      	bne.n	80005a4 <main+0xb8>
	  printf("WHO_AM_I: 0x%02X\r\n", id);
 8000584:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000588:	4619      	mov	r1, r3
 800058a:	48a3      	ldr	r0, [pc, #652]	@ (8000818 <main+0x32c>)
 800058c:	f003 fab4 	bl	8003af8 <iprintf>
	  if (id != LIS3MDL_ID) {
 8000590:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000594:	2b3d      	cmp	r3, #61	@ 0x3d
 8000596:	d00a      	beq.n	80005ae <main+0xc2>
		  heartbeat = 3;
 8000598:	4b9d      	ldr	r3, [pc, #628]	@ (8000810 <main+0x324>)
 800059a:	2203      	movs	r2, #3
 800059c:	801a      	strh	r2, [r3, #0]
		  Error_Handler();
 800059e:	f000 fa1d 	bl	80009dc <Error_Handler>
 80005a2:	e004      	b.n	80005ae <main+0xc2>
	  }
  } else {
	  heartbeat = 4;
 80005a4:	4b9a      	ldr	r3, [pc, #616]	@ (8000810 <main+0x324>)
 80005a6:	2204      	movs	r2, #4
 80005a8:	801a      	strh	r2, [r3, #0]
	  Error_Handler();
 80005aa:	f000 fa17 	bl	80009dc <Error_Handler>
  }

	if (LIS3MDL_Init(&lis3mdl) != LIS3MDL_OK) {
 80005ae:	4897      	ldr	r0, [pc, #604]	@ (800080c <main+0x320>)
 80005b0:	f000 fbc2 	bl	8000d38 <LIS3MDL_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <main+0xd8>
		heartbeat=5;
 80005ba:	4b95      	ldr	r3, [pc, #596]	@ (8000810 <main+0x324>)
 80005bc:	2205      	movs	r2, #5
 80005be:	801a      	strh	r2, [r3, #0]
		Error_Handler();
 80005c0:	f000 fa0c 	bl	80009dc <Error_Handler>
	}
	if (lis3mdl_operating_mode_set(&lis3mdl.Ctx, LIS3MDL_CONTINUOUS_MODE) != LIS3MDL_OK) {
 80005c4:	2100      	movs	r1, #0
 80005c6:	4895      	ldr	r0, [pc, #596]	@ (800081c <main+0x330>)
 80005c8:	f001 f85c 	bl	8001684 <lis3mdl_operating_mode_set>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <main+0xf0>
		heartbeat=6;
 80005d2:	4b8f      	ldr	r3, [pc, #572]	@ (8000810 <main+0x324>)
 80005d4:	2206      	movs	r2, #6
 80005d6:	801a      	strh	r2, [r3, #0]
		Error_Handler();
 80005d8:	f000 fa00 	bl	80009dc <Error_Handler>
	}
	if (lis3mdl_data_rate_set(&lis3mdl.Ctx, LIS3MDL_UHP_155Hz) != LIS3MDL_OK) {
 80005dc:	2131      	movs	r1, #49	@ 0x31
 80005de:	488f      	ldr	r0, [pc, #572]	@ (800081c <main+0x330>)
 80005e0:	f000 fe87 	bl	80012f2 <lis3mdl_data_rate_set>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d004      	beq.n	80005f4 <main+0x108>
		heartbeat=7;
 80005ea:	4b89      	ldr	r3, [pc, #548]	@ (8000810 <main+0x324>)
 80005ec:	2207      	movs	r2, #7
 80005ee:	801a      	strh	r2, [r3, #0]
		Error_Handler();
 80005f0:	f000 f9f4 	bl	80009dc <Error_Handler>
	}
	if (LIS3MDL_MAG_SetFullScale(&lis3mdl, 4) != LIS3MDL_OK) {
 80005f4:	2104      	movs	r1, #4
 80005f6:	4885      	ldr	r0, [pc, #532]	@ (800080c <main+0x320>)
 80005f8:	f000 fd80 	bl	80010fc <LIS3MDL_MAG_SetFullScale>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <main+0x120>
		heartbeat=8;
 8000602:	4b83      	ldr	r3, [pc, #524]	@ (8000810 <main+0x324>)
 8000604:	2208      	movs	r2, #8
 8000606:	801a      	strh	r2, [r3, #0]
		Error_Handler();
 8000608:	f000 f9e8 	bl	80009dc <Error_Handler>
	}
	if (LIS3MDL_Read_Reg(&lis3mdl, LIS3MDL_CTRL_REG1, &ctrl_reg1_value) != LIS3MDL_OK) {
 800060c:	f107 0342 	add.w	r3, r7, #66	@ 0x42
 8000610:	461a      	mov	r2, r3
 8000612:	2120      	movs	r1, #32
 8000614:	487d      	ldr	r0, [pc, #500]	@ (800080c <main+0x320>)
 8000616:	f000 fd99 	bl	800114c <LIS3MDL_Read_Reg>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <main+0x13e>
		heartbeat=9;
 8000620:	4b7b      	ldr	r3, [pc, #492]	@ (8000810 <main+0x324>)
 8000622:	2209      	movs	r2, #9
 8000624:	801a      	strh	r2, [r3, #0]
		Error_Handler();
 8000626:	f000 f9d9 	bl	80009dc <Error_Handler>
	}

	ctrl_reg1_value |= 0x80; // Set TEMP_EN bit
 800062a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800062e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
	if (LIS3MDL_Write_Reg(&lis3mdl, LIS3MDL_CTRL_REG1, ctrl_reg1_value) != LIS3MDL_OK) {
 8000638:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800063c:	461a      	mov	r2, r3
 800063e:	2120      	movs	r1, #32
 8000640:	4872      	ldr	r0, [pc, #456]	@ (800080c <main+0x320>)
 8000642:	f000 fd9d 	bl	8001180 <LIS3MDL_Write_Reg>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d004      	beq.n	8000656 <main+0x16a>
		heartbeat=10;
 800064c:	4b70      	ldr	r3, [pc, #448]	@ (8000810 <main+0x324>)
 800064e:	220a      	movs	r2, #10
 8000650:	801a      	strh	r2, [r3, #0]
		Error_Handler();
 8000652:	f000 f9c3 	bl	80009dc <Error_Handler>
	LIS3MDL_Axes_t mag;         // X,Y,Z struct
	lis3mdl_axis3bit16_t mag_raw; // Toorandmed
	float sensitivity;         // tundlikuse näit
	float odr;                 // Output data rate
	float eelmine_b_x;         // Eelmise mõõtmise X telje väärtus
	float measurement = 0;		//mõõtmise loendur
 8000656:	f04f 0300 	mov.w	r3, #0
 800065a:	64bb      	str	r3, [r7, #72]	@ 0x48

	LIS3MDL_MAG_GetOutputDataRate(&lis3mdl, &odr);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	486a      	ldr	r0, [pc, #424]	@ (800080c <main+0x320>)
 8000662:	f000 fbfb 	bl	8000e5c <LIS3MDL_MAG_GetOutputDataRate>

	while (1)
	{
		HAL_GPIO_WritePin(GPIOB, LED_ERR_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066c:	486c      	ldr	r0, [pc, #432]	@ (8000820 <main+0x334>)
 800066e:	f001 fba7 	bl	8001dc0 <HAL_GPIO_WritePin>
		if (lis3mdl_magnetic_raw_get(&lis3mdl.Ctx, mag_raw.i16bit) == LIS3MDL_OK) {
 8000672:	f107 030c 	add.w	r3, r7, #12
 8000676:	4619      	mov	r1, r3
 8000678:	4868      	ldr	r0, [pc, #416]	@ (800081c <main+0x330>)
 800067a:	f001 f84f 	bl	800171c <lis3mdl_magnetic_raw_get>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	f040 80d5 	bne.w	8000830 <main+0x344>
			mag.x = (int32_t)((int16_t)mag_raw.i16bit[0]);
 8000686:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800068a:	617b      	str	r3, [r7, #20]
			mag.y = (int32_t)((int16_t)mag_raw.i16bit[1]);
 800068c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000690:	61bb      	str	r3, [r7, #24]
			mag.z = (int32_t)((int16_t)mag_raw.i16bit[2]);
 8000692:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000696:	61fb      	str	r3, [r7, #28]

			LIS3MDL_MAG_GetSensitivity(&lis3mdl, &sensitivity);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4619      	mov	r1, r3
 800069e:	485b      	ldr	r0, [pc, #364]	@ (800080c <main+0x320>)
 80006a0:	f000 fb9c 	bl	8000ddc <LIS3MDL_MAG_GetSensitivity>
			mag.x = (int32_t)((float)mag.x * sensitivity);
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80006b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ba:	ee17 3a90 	vmov	r3, s15
 80006be:	617b      	str	r3, [r7, #20]
			mag.y = (int32_t)((float)mag.y * sensitivity);
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d6:	ee17 3a90 	vmov	r3, s15
 80006da:	61bb      	str	r3, [r7, #24]
			mag.z = (int32_t)((float)mag.z * sensitivity);
 80006dc:	69fb      	ldr	r3, [r7, #28]
 80006de:	ee07 3a90 	vmov	s15, r3
 80006e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80006ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f2:	ee17 3a90 	vmov	r3, s15
 80006f6:	61fb      	str	r3, [r7, #28]
			magX = mag.x;
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	4a4a      	ldr	r2, [pc, #296]	@ (8000824 <main+0x338>)
 80006fc:	6013      	str	r3, [r2, #0]
			magY = mag.y; //live expressionis vaatamiseks muutujad
 80006fe:	69bb      	ldr	r3, [r7, #24]
 8000700:	4a49      	ldr	r2, [pc, #292]	@ (8000828 <main+0x33c>)
 8000702:	6013      	str	r3, [r2, #0]
			magZ = mag.z;
 8000704:	69fb      	ldr	r3, [r7, #28]
 8000706:	4a49      	ldr	r2, [pc, #292]	@ (800082c <main+0x340>)
 8000708:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOB, LED_DB2_Pin, GPIO_PIN_RESET); //kõik madalaks enne uut
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000710:	4843      	ldr	r0, [pc, #268]	@ (8000820 <main+0x334>)
 8000712:	f001 fb55 	bl	8001dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, LED_DB1_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800071c:	4840      	ldr	r0, [pc, #256]	@ (8000820 <main+0x334>)
 800071e:	f001 fb4f 	bl	8001dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, HB_FIN_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2104      	movs	r1, #4
 8000726:	483e      	ldr	r0, [pc, #248]	@ (8000820 <main+0x334>)
 8000728:	f001 fb4a 	bl	8001dc0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, HB_RIN_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000736:	f001 fb43 	bl	8001dc0 <HAL_GPIO_WritePin>

			if(measurement != 0){ //esimese mõõtmise korral ei tehta midagi
 800073a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800073e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000746:	d04a      	beq.n	80007de <main+0x2f2>

				float b_dot_x = mag.x - eelmine_b_x;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	ee07 3a90 	vmov	s15, r3
 800074e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000752:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8000756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800075a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
				eelmine_b_x = mag.x;
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000768:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
				if(b_dot_x > 5 || b_dot_x < -5){ //kui muut on väga väike ei jää algoritm pendeldama
 800076c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000770:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8000774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077c:	dc08      	bgt.n	8000790 <main+0x2a4>
 800077e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000782:	eeb9 7a04 	vmov.f32	s14, #148	@ 0xc0a00000 -5.0
 8000786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078e:	d526      	bpl.n	80007de <main+0x2f2>
					//HB_FIN ja HB_RIN on H-silla vastavad viigud, mis võivad praegu valet pidi olla
					if (b_dot_x > 0) {
 8000790:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079c:	dd0b      	ble.n	80007b6 <main+0x2ca>
						HAL_GPIO_WritePin(GPIOB, LED_DB2_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a4:	481e      	ldr	r0, [pc, #120]	@ (8000820 <main+0x334>)
 80007a6:	f001 fb0b 	bl	8001dc0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOB, HB_FIN_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2104      	movs	r1, #4
 80007ae:	481c      	ldr	r0, [pc, #112]	@ (8000820 <main+0x334>)
 80007b0:	f001 fb06 	bl	8001dc0 <HAL_GPIO_WritePin>
 80007b4:	e013      	b.n	80007de <main+0x2f2>
					} else if (b_dot_x < 0) {
 80007b6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80007ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c2:	d50c      	bpl.n	80007de <main+0x2f2>
						HAL_GPIO_WritePin(GPIOB, LED_DB1_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	4815      	ldr	r0, [pc, #84]	@ (8000820 <main+0x334>)
 80007cc:	f001 faf8 	bl	8001dc0 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, HB_RIN_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007da:	f001 faf1 	bl	8001dc0 <HAL_GPIO_WritePin>
					}
				}
			}
			measurement++;
 80007de:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80007e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80007e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80007ea:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
 80007ee:	e025      	b.n	800083c <main+0x350>
 80007f0:	080048e4 	.word	0x080048e4
 80007f4:	08000449 	.word	0x08000449
 80007f8:	0800049b 	.word	0x0800049b
 80007fc:	080018a1 	.word	0x080018a1
 8000800:	080018b9 	.word	0x080018b9
 8000804:	08000401 	.word	0x08000401
 8000808:	08000411 	.word	0x08000411
 800080c:	200000fc 	.word	0x200000fc
 8000810:	200000f8 	.word	0x200000f8
 8000814:	20000084 	.word	0x20000084
 8000818:	08004920 	.word	0x08004920
 800081c:	2000011c 	.word	0x2000011c
 8000820:	48000400 	.word	0x48000400
 8000824:	200000ec 	.word	0x200000ec
 8000828:	200000f0 	.word	0x200000f0
 800082c:	200000f4 	.word	0x200000f4

		  }
		  else {
			  HAL_GPIO_WritePin(GPIOB, LED_ERR_Pin, GPIO_PIN_SET); //lugemist ei toimunud läheb punane led põlema
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000836:	480b      	ldr	r0, [pc, #44]	@ (8000864 <main+0x378>)
 8000838:	f001 fac2 	bl	8001dc0 <HAL_GPIO_WritePin>
		  }

	  HAL_Delay((uint32_t)(1000.0f / odr));
 800083c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000840:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000868 <main+0x37c>
 8000844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	f001 f832 	bl	80018b8 <HAL_Delay>
	  heartbeat++; //debug muutuja
 8000854:	4b05      	ldr	r3, [pc, #20]	@ (800086c <main+0x380>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <main+0x380>)
 800085e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, LED_ERR_Pin, GPIO_PIN_RESET);
 8000860:	e701      	b.n	8000666 <main+0x17a>
 8000862:	bf00      	nop
 8000864:	48000400 	.word	0x48000400
 8000868:	447a0000 	.word	0x447a0000
 800086c:	200000f8 	.word	0x200000f8

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b096      	sub	sp, #88	@ 0x58
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2244      	movs	r2, #68	@ 0x44
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f003 fa82 	bl	8003d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000892:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000896:	f001 fad3 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a0:	f000 f89c 	bl	80009dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a4:	2310      	movs	r3, #16
 80008a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008a8:	2301      	movs	r3, #1
 80008aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008b0:	2360      	movs	r3, #96	@ 0x60
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008b8:	2301      	movs	r3, #1
 80008ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008c0:	2318      	movs	r3, #24
 80008c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 fb09 	bl	8001eec <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008e0:	f000 f87c 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e4:	230f      	movs	r3, #15
 80008e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	2303      	movs	r3, #3
 80008ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	2102      	movs	r1, #2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f001 ff09 	bl	8002714 <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000908:	f000 f868 	bl	80009dc <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3758      	adds	r7, #88	@ 0x58
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 030c 	add.w	r3, r7, #12
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a29      	ldr	r2, [pc, #164]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b27      	ldr	r3, [pc, #156]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b24      	ldr	r3, [pc, #144]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a1d      	ldr	r2, [pc, #116]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_GPIO_Init+0xc0>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LIS3MDLTR_CS_Pin|HB_RIN_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800097c:	f001 fa20 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HB_FIN_Pin|LED_DB2_Pin|LED_DB1_Pin|LED_ERR_Pin, GPIO_PIN_RESET);
 8000980:	2200      	movs	r2, #0
 8000982:	f247 0104 	movw	r1, #28676	@ 0x7004
 8000986:	4814      	ldr	r0, [pc, #80]	@ (80009d8 <MX_GPIO_Init+0xc4>)
 8000988:	f001 fa1a 	bl	8001dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LIS3MDLTR_CS_Pin HB_RIN_Pin */
  GPIO_InitStruct.Pin = LIS3MDLTR_CS_Pin|HB_RIN_Pin;
 800098c:	f248 0310 	movw	r3, #32784	@ 0x8010
 8000990:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a8:	f001 f890 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : HB_FIN_Pin LED_DB2_Pin LED_DB1_Pin LED_ERR_Pin */
  GPIO_InitStruct.Pin = HB_FIN_Pin|LED_DB2_Pin|LED_DB1_Pin|LED_ERR_Pin;
 80009ac:	f247 0304 	movw	r3, #28676	@ 0x7004
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4804      	ldr	r0, [pc, #16]	@ (80009d8 <MX_GPIO_Init+0xc4>)
 80009c6:	f001 f881 	bl	8001acc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009ca:	bf00      	nop
 80009cc:	3720      	adds	r7, #32
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, LED_ERR_Pin);
 80009e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009e8:	4804      	ldr	r0, [pc, #16]	@ (80009fc <Error_Handler+0x20>)
 80009ea:	f001 fa01 	bl	8001df0 <HAL_GPIO_TogglePin>
	  HAL_Delay(2000);
 80009ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009f2:	f000 ff61 	bl	80018b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LED_ERR_Pin);
 80009f6:	bf00      	nop
 80009f8:	e7f4      	b.n	80009e4 <Error_Handler+0x8>
 80009fa:	bf00      	nop
 80009fc:	48000400 	.word	0x48000400

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <NMI_Handler+0x4>

08000a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <MemManage_Handler+0x4>

08000a60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <BusFault_Handler+0x4>

08000a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <UsageFault_Handler+0x4>

08000a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9e:	f000 feeb 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b086      	sub	sp, #24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	e00a      	b.n	8000ace <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab8:	f3af 8000 	nop.w
 8000abc:	4601      	mov	r1, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	60ba      	str	r2, [r7, #8]
 8000ac4:	b2ca      	uxtb	r2, r1
 8000ac6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
 8000ace:	697a      	ldr	r2, [r7, #20]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbf0      	blt.n	8000ab8 <_read+0x12>
  }

  return len;
 8000ad6:	687b      	ldr	r3, [r7, #4]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e009      	b.n	8000b06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	60ba      	str	r2, [r7, #8]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbf1      	blt.n	8000af2 <_write+0x12>
  }
  return len;
 8000b0e:	687b      	ldr	r3, [r7, #4]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_close>:

int _close(int file)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b40:	605a      	str	r2, [r3, #4]
  return 0;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_isatty>:

int _isatty(int file)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b58:	2301      	movs	r3, #1
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b085      	sub	sp, #20
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	@ (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	@ (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f003 f938 	bl	8003e24 <__errno>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	2000c000 	.word	0x2000c000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	20000130 	.word	0x20000130
 8000be8:	20000288 	.word	0x20000288

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <SystemInit+0x20>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bf6:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <SystemInit+0x20>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c48 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c14:	f7ff ffea 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	@ (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	@ (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f003 f8f7 	bl	8003e30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c42:	f7ff fc53 	bl	80004ec <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c48:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c54:	080049b8 	.word	0x080049b8
  ldr r2, =_sbss
 8000c58:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c5c:	20000284 	.word	0x20000284

08000c60 <ADC1_IRQHandler>:
 * @param  None
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:	b	Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_IRQHandler>
	...

08000c64 <LIS3MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_RegisterBusIO(LIS3MDL_Object_t *pObj, LIS3MDL_IO_t *pIO)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS3MDL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d103      	bne.n	8000c80 <LIS3MDL_RegisterBusIO+0x1c>
  {
    ret = LIS3MDL_ERROR;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	e051      	b.n	8000d24 <LIS3MDL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685a      	ldr	r2, [r3, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	7b1a      	ldrb	r2, [r3, #12]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	699a      	ldr	r2, [r3, #24]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a1d      	ldr	r2, [pc, #116]	@ (8000d30 <LIS3MDL_RegisterBusIO+0xcc>)
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <LIS3MDL_RegisterBusIO+0xd0>)
 8000cc2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	69da      	ldr	r2, [r3, #28]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d103      	bne.n	8000ce2 <LIS3MDL_RegisterBusIO+0x7e>
    {
      ret = LIS3MDL_ERROR;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	e020      	b.n	8000d24 <LIS3MDL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS3MDL_OK)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4798      	blx	r3
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <LIS3MDL_RegisterBusIO+0x92>
    {
      ret = LIS3MDL_ERROR;
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e016      	b.n	8000d24 <LIS3MDL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS3MDL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d112      	bne.n	8000d24 <LIS3MDL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d10d      	bne.n	8000d24 <LIS3MDL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x07;
 8000d08:	2307      	movs	r3, #7
 8000d0a:	72fb      	strb	r3, [r7, #11]

          if (LIS3MDL_Write_Reg(pObj, LIS3MDL_CTRL_REG3, data) != LIS3MDL_OK)
 8000d0c:	7afb      	ldrb	r3, [r7, #11]
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2122      	movs	r1, #34	@ 0x22
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 fa34 	bl	8001180 <LIS3MDL_Write_Reg>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d002      	beq.n	8000d24 <LIS3MDL_RegisterBusIO+0xc0>
          {
            ret = LIS3MDL_ERROR;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  }
  return ret;
 8000d24:	68fb      	ldr	r3, [r7, #12]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	080011b7 	.word	0x080011b7
 8000d34:	08001219 	.word	0x08001219

08000d38 <LIS3MDL_Init>:
  * @brief  Component initialization
  * @param  Component object pointer
  * @retval Component status
  */
int32_t LIS3MDL_Init(LIS3MDL_Object_t *pObj)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Operating mode selection - power down */
  if (lis3mdl_operating_mode_set(&(pObj->Ctx), LIS3MDL_POWER_DOWN) != LIS3MDL_OK)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3320      	adds	r3, #32
 8000d44:	2102      	movs	r1, #2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 fc9c 	bl	8001684 <lis3mdl_operating_mode_set>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <LIS3MDL_Init+0x20>
  {
    return LIS3MDL_ERROR;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e025      	b.n	8000da4 <LIS3MDL_Init+0x6c>
  }

  /* Enable BDU */
  if (lis3mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS3MDL_OK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3320      	adds	r3, #32
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f000 fcb6 	bl	80016d0 <lis3mdl_block_data_update_set>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d002      	beq.n	8000d70 <LIS3MDL_Init+0x38>
  {
    return LIS3MDL_ERROR;
 8000d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6e:	e019      	b.n	8000da4 <LIS3MDL_Init+0x6c>
  }

  /* Set Output data rate. */
  if (LIS3MDL_MAG_SetOutputDataRate(pObj, 80.0f) != LIS3MDL_OK)
 8000d70:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8000dac <LIS3MDL_Init+0x74>
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f957 	bl	8001028 <LIS3MDL_MAG_SetOutputDataRate>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <LIS3MDL_Init+0x4e>
  {
    return LIS3MDL_ERROR;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	e00e      	b.n	8000da4 <LIS3MDL_Init+0x6c>
  }

  /* Full scale selection. */
  if (LIS3MDL_MAG_SetFullScale(pObj, 4) != LIS3MDL_OK)
 8000d86:	2104      	movs	r1, #4
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f9b7 	bl	80010fc <LIS3MDL_MAG_SetFullScale>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <LIS3MDL_Init+0x62>
  {
    return LIS3MDL_ERROR;
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	e004      	b.n	8000da4 <LIS3MDL_Init+0x6c>
  }

  pObj->is_initialized = 1;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS3MDL_OK;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	42a00000 	.word	0x42a00000

08000db0 <LIS3MDL_ReadID>:
  * @param  pObj pointer to Component object
  * @param  Id pointer to Component ID
  * @retval Component status
  */
int32_t LIS3MDL_ReadID(LIS3MDL_Object_t *pObj, uint8_t *Id)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  if (lis3mdl_device_id_get(&(pObj->Ctx), Id) != LIS3MDL_OK)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3320      	adds	r3, #32
 8000dbe:	6839      	ldr	r1, [r7, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fcf3 	bl	80017ac <lis3mdl_device_id_get>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <LIS3MDL_ReadID+0x22>
  {
    return LIS3MDL_ERROR;
 8000dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd0:	e000      	b.n	8000dd4 <LIS3MDL_ReadID+0x24>
  }

  return LIS3MDL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <LIS3MDL_MAG_GetSensitivity>:
  * @param pObj the device pObj
  * @param Sensitivity pointer to Sensitivity value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetSensitivity(LIS3MDL_Object_t *pObj, float *Sensitivity)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lis3mdl_full_scale_get(&(pObj->Ctx), &full_scale) != LIS3MDL_OK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3320      	adds	r3, #32
 8000dea:	f107 020f 	add.w	r2, r7, #15
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fc0f 	bl	8001614 <lis3mdl_full_scale_get>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d002      	beq.n	8000e02 <LIS3MDL_MAG_GetSensitivity+0x26>
  {
    return LIS3MDL_ERROR;
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	e020      	b.n	8000e44 <LIS3MDL_MAG_GetSensitivity+0x68>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d81b      	bhi.n	8000e40 <LIS3MDL_MAG_GetSensitivity+0x64>
 8000e08:	a201      	add	r2, pc, #4	@ (adr r2, 8000e10 <LIS3MDL_MAG_GetSensitivity+0x34>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e21 	.word	0x08000e21
 8000e14:	08000e29 	.word	0x08000e29
 8000e18:	08000e31 	.word	0x08000e31
 8000e1c:	08000e39 	.word	0x08000e39
  {
    case LIS3MDL_4_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_4GAUSS;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LIS3MDL_MAG_GetSensitivity+0x70>)
 8000e24:	601a      	str	r2, [r3, #0]
      break;
 8000e26:	e00c      	b.n	8000e42 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_8_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_8GAUSS;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <LIS3MDL_MAG_GetSensitivity+0x74>)
 8000e2c:	601a      	str	r2, [r3, #0]
      break;
 8000e2e:	e008      	b.n	8000e42 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_12_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_12GAUSS;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4a08      	ldr	r2, [pc, #32]	@ (8000e54 <LIS3MDL_MAG_GetSensitivity+0x78>)
 8000e34:	601a      	str	r2, [r3, #0]
      break;
 8000e36:	e004      	b.n	8000e42 <LIS3MDL_MAG_GetSensitivity+0x66>
    case LIS3MDL_16_GAUSS:
      *Sensitivity = LIS3MDL_MAG_SENSITIVITY_FS_16GAUSS;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	4a07      	ldr	r2, [pc, #28]	@ (8000e58 <LIS3MDL_MAG_GetSensitivity+0x7c>)
 8000e3c:	601a      	str	r2, [r3, #0]
      break;
 8000e3e:	e000      	b.n	8000e42 <LIS3MDL_MAG_GetSensitivity+0x66>
    default:
      break;
 8000e40:	bf00      	nop
  }

  return LIS3MDL_OK;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	3e158106 	.word	0x3e158106
 8000e50:	3e958106 	.word	0x3e958106
 8000e54:	3ee04189 	.word	0x3ee04189
 8000e58:	3f158106 	.word	0x3f158106

08000e5c <LIS3MDL_MAG_GetOutputDataRate>:
  * @param pObj the device pObj
  * @param Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_GetOutputDataRate(LIS3MDL_Object_t *pObj, float *Odr)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  lis3mdl_om_t odr_low_level;

  /* Get current output data rate. */
  if (lis3mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS3MDL_OK)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3320      	adds	r3, #32
 8000e6a:	f107 020f 	add.w	r2, r7, #15
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa85 	bl	8001380 <lis3mdl_data_rate_get>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <LIS3MDL_MAG_GetOutputDataRate+0x26>
  {
    return LIS3MDL_ERROR;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	e0b6      	b.n	8000ff0 <LIS3MDL_MAG_GetOutputDataRate+0x194>
  }

  switch (odr_low_level)
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
 8000e84:	2b3e      	cmp	r3, #62	@ 0x3e
 8000e86:	f200 80b1 	bhi.w	8000fec <LIS3MDL_MAG_GetOutputDataRate+0x190>
 8000e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e90 <LIS3MDL_MAG_GetOutputDataRate+0x34>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000f8d 	.word	0x08000f8d
 8000e94:	08000fe5 	.word	0x08000fe5
 8000e98:	08000f95 	.word	0x08000f95
 8000e9c:	08000fed 	.word	0x08000fed
 8000ea0:	08000f9d 	.word	0x08000f9d
 8000ea4:	08000fed 	.word	0x08000fed
 8000ea8:	08000fa5 	.word	0x08000fa5
 8000eac:	08000fed 	.word	0x08000fed
 8000eb0:	08000fad 	.word	0x08000fad
 8000eb4:	08000fed 	.word	0x08000fed
 8000eb8:	08000fb5 	.word	0x08000fb5
 8000ebc:	08000fed 	.word	0x08000fed
 8000ec0:	08000fbd 	.word	0x08000fbd
 8000ec4:	08000fed 	.word	0x08000fed
 8000ec8:	08000fc5 	.word	0x08000fc5
 8000ecc:	08000fed 	.word	0x08000fed
 8000ed0:	08000fed 	.word	0x08000fed
 8000ed4:	08000fdd 	.word	0x08000fdd
 8000ed8:	08000f95 	.word	0x08000f95
 8000edc:	08000fed 	.word	0x08000fed
 8000ee0:	08000f9d 	.word	0x08000f9d
 8000ee4:	08000fed 	.word	0x08000fed
 8000ee8:	08000fa5 	.word	0x08000fa5
 8000eec:	08000fed 	.word	0x08000fed
 8000ef0:	08000fad 	.word	0x08000fad
 8000ef4:	08000fed 	.word	0x08000fed
 8000ef8:	08000fb5 	.word	0x08000fb5
 8000efc:	08000fed 	.word	0x08000fed
 8000f00:	08000fbd 	.word	0x08000fbd
 8000f04:	08000fed 	.word	0x08000fed
 8000f08:	08000fc5 	.word	0x08000fc5
 8000f0c:	08000fed 	.word	0x08000fed
 8000f10:	08000fed 	.word	0x08000fed
 8000f14:	08000fd5 	.word	0x08000fd5
 8000f18:	08000f95 	.word	0x08000f95
 8000f1c:	08000fed 	.word	0x08000fed
 8000f20:	08000f9d 	.word	0x08000f9d
 8000f24:	08000fed 	.word	0x08000fed
 8000f28:	08000fa5 	.word	0x08000fa5
 8000f2c:	08000fed 	.word	0x08000fed
 8000f30:	08000fad 	.word	0x08000fad
 8000f34:	08000fed 	.word	0x08000fed
 8000f38:	08000fb5 	.word	0x08000fb5
 8000f3c:	08000fed 	.word	0x08000fed
 8000f40:	08000fbd 	.word	0x08000fbd
 8000f44:	08000fed 	.word	0x08000fed
 8000f48:	08000fc5 	.word	0x08000fc5
 8000f4c:	08000fed 	.word	0x08000fed
 8000f50:	08000fed 	.word	0x08000fed
 8000f54:	08000fcd 	.word	0x08000fcd
 8000f58:	08000f95 	.word	0x08000f95
 8000f5c:	08000fed 	.word	0x08000fed
 8000f60:	08000f9d 	.word	0x08000f9d
 8000f64:	08000fed 	.word	0x08000fed
 8000f68:	08000fa5 	.word	0x08000fa5
 8000f6c:	08000fed 	.word	0x08000fed
 8000f70:	08000fad 	.word	0x08000fad
 8000f74:	08000fed 	.word	0x08000fed
 8000f78:	08000fb5 	.word	0x08000fb5
 8000f7c:	08000fed 	.word	0x08000fed
 8000f80:	08000fbd 	.word	0x08000fbd
 8000f84:	08000fed 	.word	0x08000fed
 8000f88:	08000fc5 	.word	0x08000fc5
  {
    case LIS3MDL_LP_Hz625:
      *Odr = 0.625f;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff8 <LIS3MDL_MAG_GetOutputDataRate+0x19c>)
 8000f90:	601a      	str	r2, [r3, #0]
      break;
 8000f92:	e02c      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1Hz25:
    case LIS3MDL_MP_1Hz25:
    case LIS3MDL_HP_1Hz25:
    case LIS3MDL_UHP_1Hz25:
      *Odr = 1.250f;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	4a19      	ldr	r2, [pc, #100]	@ (8000ffc <LIS3MDL_MAG_GetOutputDataRate+0x1a0>)
 8000f98:	601a      	str	r2, [r3, #0]
      break;
 8000f9a:	e028      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_2Hz5:
    case LIS3MDL_MP_2Hz5:
    case LIS3MDL_HP_2Hz5:
    case LIS3MDL_UHP_2Hz5:
      *Odr = 2.500f;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4a18      	ldr	r2, [pc, #96]	@ (8001000 <LIS3MDL_MAG_GetOutputDataRate+0x1a4>)
 8000fa0:	601a      	str	r2, [r3, #0]
      break;
 8000fa2:	e024      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_5Hz:
    case LIS3MDL_MP_5Hz:
    case LIS3MDL_HP_5Hz:
    case LIS3MDL_UHP_5Hz:
      *Odr = 5.000f;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <LIS3MDL_MAG_GetOutputDataRate+0x1a8>)
 8000fa8:	601a      	str	r2, [r3, #0]
      break;
 8000faa:	e020      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_10Hz:
    case LIS3MDL_MP_10Hz:
    case LIS3MDL_HP_10Hz:
    case LIS3MDL_UHP_10Hz:
      *Odr = 10.000f;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <LIS3MDL_MAG_GetOutputDataRate+0x1ac>)
 8000fb0:	601a      	str	r2, [r3, #0]
      break;
 8000fb2:	e01c      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_20Hz:
    case LIS3MDL_MP_20Hz:
    case LIS3MDL_HP_20Hz:
    case LIS3MDL_UHP_20Hz:
      *Odr = 20.000f;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4a15      	ldr	r2, [pc, #84]	@ (800100c <LIS3MDL_MAG_GetOutputDataRate+0x1b0>)
 8000fb8:	601a      	str	r2, [r3, #0]
      break;
 8000fba:	e018      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_40Hz:
    case LIS3MDL_MP_40Hz:
    case LIS3MDL_HP_40Hz:
    case LIS3MDL_UHP_40Hz:
      *Odr = 40.000f;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	4a14      	ldr	r2, [pc, #80]	@ (8001010 <LIS3MDL_MAG_GetOutputDataRate+0x1b4>)
 8000fc0:	601a      	str	r2, [r3, #0]
      break;
 8000fc2:	e014      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_80Hz:
    case LIS3MDL_MP_80Hz:
    case LIS3MDL_HP_80Hz:
    case LIS3MDL_UHP_80Hz:
      *Odr = 80.000f;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	4a13      	ldr	r2, [pc, #76]	@ (8001014 <LIS3MDL_MAG_GetOutputDataRate+0x1b8>)
 8000fc8:	601a      	str	r2, [r3, #0]
      break;
 8000fca:	e010      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_UHP_155Hz:
      *Odr = 155.000f;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <LIS3MDL_MAG_GetOutputDataRate+0x1bc>)
 8000fd0:	601a      	str	r2, [r3, #0]
      break;
 8000fd2:	e00c      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_HP_300Hz:
      *Odr = 300.000f;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4a11      	ldr	r2, [pc, #68]	@ (800101c <LIS3MDL_MAG_GetOutputDataRate+0x1c0>)
 8000fd8:	601a      	str	r2, [r3, #0]
      break;
 8000fda:	e008      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_MP_560Hz:
      *Odr = 560.000f;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4a10      	ldr	r2, [pc, #64]	@ (8001020 <LIS3MDL_MAG_GetOutputDataRate+0x1c4>)
 8000fe0:	601a      	str	r2, [r3, #0]
      break;
 8000fe2:	e004      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    case LIS3MDL_LP_1kHz:
      *Odr = 1000.000f;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <LIS3MDL_MAG_GetOutputDataRate+0x1c8>)
 8000fe8:	601a      	str	r2, [r3, #0]
      break;
 8000fea:	e000      	b.n	8000fee <LIS3MDL_MAG_GetOutputDataRate+0x192>
    default:
      break;
 8000fec:	bf00      	nop
  }

  return LIS3MDL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	3f200000 	.word	0x3f200000
 8000ffc:	3fa00000 	.word	0x3fa00000
 8001000:	40200000 	.word	0x40200000
 8001004:	40a00000 	.word	0x40a00000
 8001008:	41200000 	.word	0x41200000
 800100c:	41a00000 	.word	0x41a00000
 8001010:	42200000 	.word	0x42200000
 8001014:	42a00000 	.word	0x42a00000
 8001018:	431b0000 	.word	0x431b0000
 800101c:	43960000 	.word	0x43960000
 8001020:	440c0000 	.word	0x440c0000
 8001024:	447a0000 	.word	0x447a0000

08001028 <LIS3MDL_MAG_SetOutputDataRate>:
  * @param pObj the device pObj
  * @param Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetOutputDataRate(LIS3MDL_Object_t *pObj, float Odr)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	ed87 0a00 	vstr	s0, [r7]
  lis3mdl_om_t new_odr;

  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
            : (Odr <=  1.250f) ? LIS3MDL_LP_1Hz25
 8001034:	edd7 7a00 	vldr	s15, [r7]
 8001038:	eeb6 7a04 	vmov.f32	s14, #100	@ 0x3f200000  0.625
 800103c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	d801      	bhi.n	800104a <LIS3MDL_MAG_SetOutputDataRate+0x22>
 8001046:	2300      	movs	r3, #0
 8001048:	e042      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800104a:	edd7 7a00 	vldr	s15, [r7]
 800104e:	eeb7 7a04 	vmov.f32	s14, #116	@ 0x3fa00000  1.250
 8001052:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105a:	d801      	bhi.n	8001060 <LIS3MDL_MAG_SetOutputDataRate+0x38>
 800105c:	2302      	movs	r3, #2
 800105e:	e037      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8001060:	edd7 7a00 	vldr	s15, [r7]
 8001064:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8001068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d801      	bhi.n	8001076 <LIS3MDL_MAG_SetOutputDataRate+0x4e>
 8001072:	2304      	movs	r3, #4
 8001074:	e02c      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 8001076:	edd7 7a00 	vldr	s15, [r7]
 800107a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800107e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	d801      	bhi.n	800108c <LIS3MDL_MAG_SetOutputDataRate+0x64>
 8001088:	2306      	movs	r3, #6
 800108a:	e021      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 800108c:	edd7 7a00 	vldr	s15, [r7]
 8001090:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d801      	bhi.n	80010a2 <LIS3MDL_MAG_SetOutputDataRate+0x7a>
 800109e:	2308      	movs	r3, #8
 80010a0:	e016      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80010a2:	edd7 7a00 	vldr	s15, [r7]
 80010a6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d801      	bhi.n	80010b8 <LIS3MDL_MAG_SetOutputDataRate+0x90>
 80010b4:	230a      	movs	r3, #10
 80010b6:	e00b      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80010b8:	edd7 7a00 	vldr	s15, [r7]
 80010bc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80010f8 <LIS3MDL_MAG_SetOutputDataRate+0xd0>
 80010c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	d801      	bhi.n	80010ce <LIS3MDL_MAG_SetOutputDataRate+0xa6>
 80010ca:	230c      	movs	r3, #12
 80010cc:	e000      	b.n	80010d0 <LIS3MDL_MAG_SetOutputDataRate+0xa8>
 80010ce:	230e      	movs	r3, #14
  new_odr = (Odr <=  0.625f) ? LIS3MDL_LP_Hz625
 80010d0:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 10.000f) ? LIS3MDL_LP_10Hz
            : (Odr <= 20.000f) ? LIS3MDL_LP_20Hz
            : (Odr <= 40.000f) ? LIS3MDL_LP_40Hz
            :                      LIS3MDL_LP_80Hz;

  if (lis3mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS3MDL_OK)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3320      	adds	r3, #32
 80010d6:	7bfa      	ldrb	r2, [r7, #15]
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f909 	bl	80012f2 <lis3mdl_data_rate_set>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <LIS3MDL_MAG_SetOutputDataRate+0xc4>
  {
    return LIS3MDL_ERROR;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e000      	b.n	80010ee <LIS3MDL_MAG_SetOutputDataRate+0xc6>
  }

  return LIS3MDL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	42200000 	.word	0x42200000

080010fc <LIS3MDL_MAG_SetFullScale>:
  * @param pObj the device pObj
  * @param FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_MAG_SetFullScale(LIS3MDL_Object_t *pObj, int32_t FullScale)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  lis3mdl_fs_t new_fs;

  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
           : (FullScale <= 8) ? LIS3MDL_8_GAUSS
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b04      	cmp	r3, #4
 800110a:	dd0b      	ble.n	8001124 <LIS3MDL_MAG_SetFullScale+0x28>
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2b08      	cmp	r3, #8
 8001110:	dd06      	ble.n	8001120 <LIS3MDL_MAG_SetFullScale+0x24>
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	dc01      	bgt.n	800111c <LIS3MDL_MAG_SetFullScale+0x20>
 8001118:	2302      	movs	r3, #2
 800111a:	e004      	b.n	8001126 <LIS3MDL_MAG_SetFullScale+0x2a>
 800111c:	2303      	movs	r3, #3
 800111e:	e002      	b.n	8001126 <LIS3MDL_MAG_SetFullScale+0x2a>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <LIS3MDL_MAG_SetFullScale+0x2a>
 8001124:	2300      	movs	r3, #0
  new_fs = (FullScale <= 4) ? LIS3MDL_4_GAUSS
 8001126:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 12) ? LIS3MDL_12_GAUSS
           :                       LIS3MDL_16_GAUSS;

  if (lis3mdl_full_scale_set(&(pObj->Ctx), new_fs) != LIS3MDL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3320      	adds	r3, #32
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f000 fa49 	bl	80015c8 <lis3mdl_full_scale_set>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d002      	beq.n	8001142 <LIS3MDL_MAG_SetFullScale+0x46>
  {
    return LIS3MDL_ERROR;
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	e000      	b.n	8001144 <LIS3MDL_MAG_SetFullScale+0x48>
  }

  return LIS3MDL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <LIS3MDL_Read_Reg>:
  * @param Reg address to be read
  * @param pData pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_Read_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	460b      	mov	r3, r1
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	72fb      	strb	r3, [r7, #11]
  if (lis3mdl_read_reg(&(pObj->Ctx), Reg, pData, 1) != LIS3MDL_OK)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f103 0020 	add.w	r0, r3, #32
 8001160:	7af9      	ldrb	r1, [r7, #11]
 8001162:	2301      	movs	r3, #1
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	f000 f888 	bl	800127a <lis3mdl_read_reg>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <LIS3MDL_Read_Reg+0x2a>
  {
    return LIS3MDL_ERROR;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e000      	b.n	8001178 <LIS3MDL_Read_Reg+0x2c>
  }

  return LIS3MDL_OK;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <LIS3MDL_Write_Reg>:
  * @param Reg address to be written
  * @param Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS3MDL_Write_Reg(LIS3MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	70fb      	strb	r3, [r7, #3]
 800118c:	4613      	mov	r3, r2
 800118e:	70bb      	strb	r3, [r7, #2]
  if (lis3mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS3MDL_OK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f103 0020 	add.w	r0, r3, #32
 8001196:	1cba      	adds	r2, r7, #2
 8001198:	78f9      	ldrb	r1, [r7, #3]
 800119a:	2301      	movs	r3, #1
 800119c:	f000 f88b 	bl	80012b6 <lis3mdl_write_reg>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d002      	beq.n	80011ac <LIS3MDL_Write_Reg+0x2c>
  {
    return LIS3MDL_ERROR;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e000      	b.n	80011ae <LIS3MDL_Write_Reg+0x2e>
  }

  return LIS3MDL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <ReadRegWrap>:
  * @brief  Wrap Read register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80011b6:	b590      	push	{r4, r7, lr}
 80011b8:	b087      	sub	sp, #28
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	461a      	mov	r2, r3
 80011c2:	460b      	mov	r3, r1
 80011c4:	72fb      	strb	r3, [r7, #11]
 80011c6:	4613      	mov	r3, r2
 80011c8:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10e      	bne.n	80011f4 <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	695c      	ldr	r4, [r3, #20]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	7b1b      	ldrb	r3, [r3, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	7afb      	ldrb	r3, [r7, #11]
 80011e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	893b      	ldrh	r3, [r7, #8]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	47a0      	blx	r4
 80011f0:	4603      	mov	r3, r0
 80011f2:	e00d      	b.n	8001210 <ReadRegWrap+0x5a>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	695c      	ldr	r4, [r3, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	7b1b      	ldrb	r3, [r3, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	7afb      	ldrb	r3, [r7, #11]
 8001200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4619      	mov	r1, r3
 8001208:	893b      	ldrh	r3, [r7, #8]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	47a0      	blx	r4
 800120e:	4603      	mov	r3, r0
  }
}
 8001210:	4618      	mov	r0, r3
 8001212:	371c      	adds	r7, #28
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}

08001218 <WriteRegWrap>:
  * @brief  Wrap Write register component function to Bus IO function
  * @param  Component object pointer
  * @retval Component status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	461a      	mov	r2, r3
 8001224:	460b      	mov	r3, r1
 8001226:	72fb      	strb	r3, [r7, #11]
 8001228:	4613      	mov	r3, r2
 800122a:	813b      	strh	r3, [r7, #8]
  LIS3MDL_Object_t *pObj = (LIS3MDL_Object_t *)handle;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS3MDL_I2C_BUS) /* I2C */
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10e      	bne.n	8001256 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	691c      	ldr	r4, [r3, #16]
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	7b1b      	ldrb	r3, [r3, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001248:	b2db      	uxtb	r3, r3
 800124a:	4619      	mov	r1, r3
 800124c:	893b      	ldrh	r3, [r7, #8]
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	47a0      	blx	r4
 8001252:	4603      	mov	r3, r0
 8001254:	e00d      	b.n	8001272 <WriteRegWrap+0x5a>
  }
  else   /* SPI 4-Wires or SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	691c      	ldr	r4, [r3, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	7b1b      	ldrb	r3, [r3, #12]
 800125e:	4618      	mov	r0, r3
 8001260:	7afb      	ldrb	r3, [r7, #11]
 8001262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4619      	mov	r1, r3
 800126a:	893b      	ldrh	r3, [r7, #8]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	47a0      	blx	r4
 8001270:	4603      	mov	r3, r0
  }
}
 8001272:	4618      	mov	r0, r3
 8001274:	371c      	adds	r7, #28
 8001276:	46bd      	mov	sp, r7
 8001278:	bd90      	pop	{r4, r7, pc}

0800127a <lis3mdl_read_reg>:
  *
  */
int32_t __weak lis3mdl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	72fb      	strb	r3, [r7, #11]
 800128a:	4613      	mov	r3, r2
 800128c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <lis3mdl_read_reg+0x20>
  {
    return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	e009      	b.n	80012ae <lis3mdl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685c      	ldr	r4, [r3, #4]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	68d8      	ldr	r0, [r3, #12]
 80012a2:	893b      	ldrh	r3, [r7, #8]
 80012a4:	7af9      	ldrb	r1, [r7, #11]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	47a0      	blx	r4
 80012aa:	6178      	str	r0, [r7, #20]

  return ret;
 80012ac:	697b      	ldr	r3, [r7, #20]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}

080012b6 <lis3mdl_write_reg>:
  *
  */
int32_t __weak lis3mdl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80012b6:	b590      	push	{r4, r7, lr}
 80012b8:	b087      	sub	sp, #28
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	60f8      	str	r0, [r7, #12]
 80012be:	607a      	str	r2, [r7, #4]
 80012c0:	461a      	mov	r2, r3
 80012c2:	460b      	mov	r3, r1
 80012c4:	72fb      	strb	r3, [r7, #11]
 80012c6:	4613      	mov	r3, r2
 80012c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <lis3mdl_write_reg+0x20>
  {
    return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
 80012d4:	e009      	b.n	80012ea <lis3mdl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681c      	ldr	r4, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	68d8      	ldr	r0, [r3, #12]
 80012de:	893b      	ldrh	r3, [r7, #8]
 80012e0:	7af9      	ldrb	r1, [r7, #11]
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	47a0      	blx	r4
 80012e6:	6178      	str	r0, [r7, #20]

  return ret;
 80012e8:	697b      	ldr	r3, [r7, #20]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd90      	pop	{r4, r7, pc}

080012f2 <lis3mdl_data_rate_set>:
  * @param  val         change the values of om in reg CTRL_REG1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_set(const stmdev_ctx_t *ctx, lis3mdl_om_t val)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  lis3mdl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80012fe:	f107 0210 	add.w	r2, r7, #16
 8001302:	2301      	movs	r3, #1
 8001304:	2120      	movs	r1, #32
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffb7 	bl	800127a <lis3mdl_read_reg>
 800130c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10f      	bne.n	8001334 <lis3mdl_data_rate_set+0x42>
  {
    ctrl_reg1.om = (uint8_t)val;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800131a:	b2da      	uxtb	r2, r3
 800131c:	7c3b      	ldrb	r3, [r7, #16]
 800131e:	f362 0346 	bfi	r3, r2, #1, #6
 8001322:	743b      	strb	r3, [r7, #16]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001324:	f107 0210 	add.w	r2, r7, #16
 8001328:	2301      	movs	r3, #1
 800132a:	2120      	movs	r1, #32
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ffc2 	bl	80012b6 <lis3mdl_write_reg>
 8001332:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <lis3mdl_data_rate_set+0x58>
  {
    /* set mode also for z axis, ctrl_reg4 -> omz */
    ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG4, (uint8_t *)&ctrl_reg4, 1);
 800133a:	f107 020c 	add.w	r2, r7, #12
 800133e:	2301      	movs	r3, #1
 8001340:	2123      	movs	r1, #35	@ 0x23
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff99 	bl	800127a <lis3mdl_read_reg>
 8001348:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d111      	bne.n	8001374 <lis3mdl_data_rate_set+0x82>
  {
    ctrl_reg4.omz = (uint8_t)(((uint8_t) val >> 4) & 0x03U);
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	091b      	lsrs	r3, r3, #4
 8001354:	b2db      	uxtb	r3, r3
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	b2da      	uxtb	r2, r3
 800135c:	7b3b      	ldrb	r3, [r7, #12]
 800135e:	f362 0383 	bfi	r3, r2, #2, #2
 8001362:	733b      	strb	r3, [r7, #12]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG4,
 8001364:	f107 020c 	add.w	r2, r7, #12
 8001368:	2301      	movs	r3, #1
 800136a:	2123      	movs	r1, #35	@ 0x23
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff ffa2 	bl	80012b6 <lis3mdl_write_reg>
 8001372:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8001374:	697b      	ldr	r3, [r7, #20]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <lis3mdl_data_rate_get>:
  * @param  val      Get the values of om in reg CTRL_REG1(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_data_rate_get(const stmdev_ctx_t *ctx, lis3mdl_om_t *val)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  /* z axis, ctrl_reg4 -> omz is aligned with x/y axis ctrl_reg1 -> om*/
  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800138a:	f107 0208 	add.w	r2, r7, #8
 800138e:	2301      	movs	r3, #1
 8001390:	2120      	movs	r1, #32
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff71 	bl	800127a <lis3mdl_read_reg>
 8001398:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg1.om)
 800139a:	7a3b      	ldrb	r3, [r7, #8]
 800139c:	f3c3 0345 	ubfx	r3, r3, #1, #6
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80013a4:	f200 8106 	bhi.w	80015b4 <lis3mdl_data_rate_get+0x234>
 80013a8:	a201      	add	r2, pc, #4	@ (adr r2, 80013b0 <lis3mdl_data_rate_get+0x30>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080014ad 	.word	0x080014ad
 80013b4:	080014b5 	.word	0x080014b5
 80013b8:	080014d5 	.word	0x080014d5
 80013bc:	080015b5 	.word	0x080015b5
 80013c0:	080014dd 	.word	0x080014dd
 80013c4:	080015b5 	.word	0x080015b5
 80013c8:	080014e5 	.word	0x080014e5
 80013cc:	080015b5 	.word	0x080015b5
 80013d0:	080014ed 	.word	0x080014ed
 80013d4:	080015b5 	.word	0x080015b5
 80013d8:	080014f5 	.word	0x080014f5
 80013dc:	080015b5 	.word	0x080015b5
 80013e0:	080014fd 	.word	0x080014fd
 80013e4:	080015b5 	.word	0x080015b5
 80013e8:	08001505 	.word	0x08001505
 80013ec:	080015b5 	.word	0x080015b5
 80013f0:	080015b5 	.word	0x080015b5
 80013f4:	080014bd 	.word	0x080014bd
 80013f8:	0800150d 	.word	0x0800150d
 80013fc:	080015b5 	.word	0x080015b5
 8001400:	08001515 	.word	0x08001515
 8001404:	080015b5 	.word	0x080015b5
 8001408:	0800151d 	.word	0x0800151d
 800140c:	080015b5 	.word	0x080015b5
 8001410:	08001525 	.word	0x08001525
 8001414:	080015b5 	.word	0x080015b5
 8001418:	0800152d 	.word	0x0800152d
 800141c:	080015b5 	.word	0x080015b5
 8001420:	08001535 	.word	0x08001535
 8001424:	080015b5 	.word	0x080015b5
 8001428:	0800153d 	.word	0x0800153d
 800142c:	080015b5 	.word	0x080015b5
 8001430:	080015b5 	.word	0x080015b5
 8001434:	080014c5 	.word	0x080014c5
 8001438:	08001545 	.word	0x08001545
 800143c:	080015b5 	.word	0x080015b5
 8001440:	0800154d 	.word	0x0800154d
 8001444:	080015b5 	.word	0x080015b5
 8001448:	08001555 	.word	0x08001555
 800144c:	080015b5 	.word	0x080015b5
 8001450:	0800155d 	.word	0x0800155d
 8001454:	080015b5 	.word	0x080015b5
 8001458:	08001565 	.word	0x08001565
 800145c:	080015b5 	.word	0x080015b5
 8001460:	0800156d 	.word	0x0800156d
 8001464:	080015b5 	.word	0x080015b5
 8001468:	08001575 	.word	0x08001575
 800146c:	080015b5 	.word	0x080015b5
 8001470:	080015b5 	.word	0x080015b5
 8001474:	080014cd 	.word	0x080014cd
 8001478:	0800157d 	.word	0x0800157d
 800147c:	080015b5 	.word	0x080015b5
 8001480:	08001585 	.word	0x08001585
 8001484:	080015b5 	.word	0x080015b5
 8001488:	0800158d 	.word	0x0800158d
 800148c:	080015b5 	.word	0x080015b5
 8001490:	08001595 	.word	0x08001595
 8001494:	080015b5 	.word	0x080015b5
 8001498:	0800159d 	.word	0x0800159d
 800149c:	080015b5 	.word	0x080015b5
 80014a0:	080015a5 	.word	0x080015a5
 80014a4:	080015b5 	.word	0x080015b5
 80014a8:	080015ad 	.word	0x080015ad
  {
    case LIS3MDL_LP_Hz625:
      *val = LIS3MDL_LP_Hz625;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
      break;
 80014b2:	e083      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_1kHz:
      *val = LIS3MDL_LP_1kHz;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
      break;
 80014ba:	e07f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_560Hz:
      *val = LIS3MDL_MP_560Hz;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2211      	movs	r2, #17
 80014c0:	701a      	strb	r2, [r3, #0]
      break;
 80014c2:	e07b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_300Hz:
      *val = LIS3MDL_HP_300Hz;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2221      	movs	r2, #33	@ 0x21
 80014c8:	701a      	strb	r2, [r3, #0]
      break;
 80014ca:	e077      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_155Hz:
      *val = LIS3MDL_UHP_155Hz;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2231      	movs	r2, #49	@ 0x31
 80014d0:	701a      	strb	r2, [r3, #0]
      break;
 80014d2:	e073      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_1Hz25:
      *val = LIS3MDL_LP_1Hz25;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2202      	movs	r2, #2
 80014d8:	701a      	strb	r2, [r3, #0]
      break;
 80014da:	e06f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_2Hz5:
      *val = LIS3MDL_LP_2Hz5;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2204      	movs	r2, #4
 80014e0:	701a      	strb	r2, [r3, #0]
      break;
 80014e2:	e06b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_5Hz:
      *val = LIS3MDL_LP_5Hz;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2206      	movs	r2, #6
 80014e8:	701a      	strb	r2, [r3, #0]
      break;
 80014ea:	e067      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_10Hz:
      *val = LIS3MDL_LP_10Hz;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2208      	movs	r2, #8
 80014f0:	701a      	strb	r2, [r3, #0]
      break;
 80014f2:	e063      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_20Hz:
      *val = LIS3MDL_LP_20Hz;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	220a      	movs	r2, #10
 80014f8:	701a      	strb	r2, [r3, #0]
      break;
 80014fa:	e05f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_40Hz:
      *val = LIS3MDL_LP_40Hz;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	220c      	movs	r2, #12
 8001500:	701a      	strb	r2, [r3, #0]
      break;
 8001502:	e05b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_LP_80Hz:
      *val = LIS3MDL_LP_80Hz;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	220e      	movs	r2, #14
 8001508:	701a      	strb	r2, [r3, #0]
      break;
 800150a:	e057      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_1Hz25:
      *val = LIS3MDL_MP_1Hz25;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	2212      	movs	r2, #18
 8001510:	701a      	strb	r2, [r3, #0]
      break;
 8001512:	e053      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_2Hz5:
      *val = LIS3MDL_MP_2Hz5;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2214      	movs	r2, #20
 8001518:	701a      	strb	r2, [r3, #0]
      break;
 800151a:	e04f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_5Hz:
      *val = LIS3MDL_MP_5Hz;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2216      	movs	r2, #22
 8001520:	701a      	strb	r2, [r3, #0]
      break;
 8001522:	e04b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_10Hz:
      *val = LIS3MDL_MP_10Hz;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2218      	movs	r2, #24
 8001528:	701a      	strb	r2, [r3, #0]
      break;
 800152a:	e047      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_20Hz:
      *val = LIS3MDL_MP_20Hz;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	221a      	movs	r2, #26
 8001530:	701a      	strb	r2, [r3, #0]
      break;
 8001532:	e043      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_40Hz:
      *val = LIS3MDL_MP_40Hz;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	221c      	movs	r2, #28
 8001538:	701a      	strb	r2, [r3, #0]
      break;
 800153a:	e03f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_MP_80Hz:
      *val = LIS3MDL_MP_80Hz;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	221e      	movs	r2, #30
 8001540:	701a      	strb	r2, [r3, #0]
      break;
 8001542:	e03b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_1Hz25:
      *val = LIS3MDL_HP_1Hz25;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2222      	movs	r2, #34	@ 0x22
 8001548:	701a      	strb	r2, [r3, #0]
      break;
 800154a:	e037      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_2Hz5:
      *val = LIS3MDL_HP_2Hz5;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2224      	movs	r2, #36	@ 0x24
 8001550:	701a      	strb	r2, [r3, #0]
      break;
 8001552:	e033      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_5Hz:
      *val = LIS3MDL_HP_5Hz;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2226      	movs	r2, #38	@ 0x26
 8001558:	701a      	strb	r2, [r3, #0]
      break;
 800155a:	e02f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_10Hz:
      *val = LIS3MDL_HP_10Hz;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2228      	movs	r2, #40	@ 0x28
 8001560:	701a      	strb	r2, [r3, #0]
      break;
 8001562:	e02b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_20Hz:
      *val = LIS3MDL_HP_20Hz;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	222a      	movs	r2, #42	@ 0x2a
 8001568:	701a      	strb	r2, [r3, #0]
      break;
 800156a:	e027      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_40Hz:
      *val = LIS3MDL_HP_40Hz;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	222c      	movs	r2, #44	@ 0x2c
 8001570:	701a      	strb	r2, [r3, #0]
      break;
 8001572:	e023      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_HP_80Hz:
      *val = LIS3MDL_HP_80Hz;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	222e      	movs	r2, #46	@ 0x2e
 8001578:	701a      	strb	r2, [r3, #0]
      break;
 800157a:	e01f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_1Hz25:
      *val = LIS3MDL_UHP_1Hz25;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	2232      	movs	r2, #50	@ 0x32
 8001580:	701a      	strb	r2, [r3, #0]
      break;
 8001582:	e01b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_2Hz5:
      *val = LIS3MDL_UHP_2Hz5;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	2234      	movs	r2, #52	@ 0x34
 8001588:	701a      	strb	r2, [r3, #0]
      break;
 800158a:	e017      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_5Hz:
      *val = LIS3MDL_UHP_5Hz;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2236      	movs	r2, #54	@ 0x36
 8001590:	701a      	strb	r2, [r3, #0]
      break;
 8001592:	e013      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_10Hz:
      *val = LIS3MDL_UHP_10Hz;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2238      	movs	r2, #56	@ 0x38
 8001598:	701a      	strb	r2, [r3, #0]
      break;
 800159a:	e00f      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_20Hz:
      *val = LIS3MDL_UHP_20Hz;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	223a      	movs	r2, #58	@ 0x3a
 80015a0:	701a      	strb	r2, [r3, #0]
      break;
 80015a2:	e00b      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_40Hz:
      *val = LIS3MDL_UHP_40Hz;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	223c      	movs	r2, #60	@ 0x3c
 80015a8:	701a      	strb	r2, [r3, #0]
      break;
 80015aa:	e007      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    case LIS3MDL_UHP_80Hz:
      *val = LIS3MDL_UHP_80Hz;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	223e      	movs	r2, #62	@ 0x3e
 80015b0:	701a      	strb	r2, [r3, #0]
      break;
 80015b2:	e003      	b.n	80015bc <lis3mdl_data_rate_get+0x23c>

    default:
      *val = LIS3MDL_UHP_80Hz;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	223e      	movs	r2, #62	@ 0x3e
 80015b8:	701a      	strb	r2, [r3, #0]
      break;
 80015ba:	bf00      	nop
  }

  return ret;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop

080015c8 <lis3mdl_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_set(const stmdev_ctx_t *ctx, lis3mdl_fs_t val)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80015d4:	f107 0208 	add.w	r2, r7, #8
 80015d8:	2301      	movs	r3, #1
 80015da:	2121      	movs	r1, #33	@ 0x21
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe4c 	bl	800127a <lis3mdl_read_reg>
 80015e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <lis3mdl_full_scale_set+0x42>
  {
    ctrl_reg2.fs = (uint8_t)val;
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	7a3b      	ldrb	r3, [r7, #8]
 80015f4:	f362 1346 	bfi	r3, r2, #5, #2
 80015f8:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80015fa:	f107 0208 	add.w	r2, r7, #8
 80015fe:	2301      	movs	r3, #1
 8001600:	2121      	movs	r1, #33	@ 0x21
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff fe57 	bl	80012b6 <lis3mdl_write_reg>
 8001608:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <lis3mdl_full_scale_get>:
  * @param  val      get the values of fs in reg CTRL_REG2(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_full_scale_get(const stmdev_ctx_t *ctx, lis3mdl_fs_t *val)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  lis3mdl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800161e:	f107 0208 	add.w	r2, r7, #8
 8001622:	2301      	movs	r3, #1
 8001624:	2121      	movs	r1, #33	@ 0x21
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fe27 	bl	800127a <lis3mdl_read_reg>
 800162c:	60f8      	str	r0, [r7, #12]

  switch (ctrl_reg2.fs)
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d81a      	bhi.n	8001670 <lis3mdl_full_scale_get+0x5c>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <lis3mdl_full_scale_get+0x2c>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001651 	.word	0x08001651
 8001644:	08001659 	.word	0x08001659
 8001648:	08001661 	.word	0x08001661
 800164c:	08001669 	.word	0x08001669
  {
    case LIS3MDL_4_GAUSS:
      *val = LIS3MDL_4_GAUSS;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
      break;
 8001656:	e00f      	b.n	8001678 <lis3mdl_full_scale_get+0x64>

    case LIS3MDL_8_GAUSS:
      *val = LIS3MDL_8_GAUSS;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	2201      	movs	r2, #1
 800165c:	701a      	strb	r2, [r3, #0]
      break;
 800165e:	e00b      	b.n	8001678 <lis3mdl_full_scale_get+0x64>

    case LIS3MDL_12_GAUSS:
      *val = LIS3MDL_12_GAUSS;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
      break;
 8001666:	e007      	b.n	8001678 <lis3mdl_full_scale_get+0x64>

    case LIS3MDL_16_GAUSS:
      *val = LIS3MDL_16_GAUSS;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2203      	movs	r2, #3
 800166c:	701a      	strb	r2, [r3, #0]
      break;
 800166e:	e003      	b.n	8001678 <lis3mdl_full_scale_get+0x64>

    default:
      *val = LIS3MDL_4_GAUSS;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
      break;
 8001676:	bf00      	nop
  }

  return ret;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <lis3mdl_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_operating_mode_set(const stmdev_ctx_t *ctx,
                                   lis3mdl_md_t val)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg3_t ctrl_reg3;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 8001690:	f107 0208 	add.w	r2, r7, #8
 8001694:	2301      	movs	r3, #1
 8001696:	2122      	movs	r1, #34	@ 0x22
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fdee 	bl	800127a <lis3mdl_read_reg>
 800169e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <lis3mdl_operating_mode_set+0x42>
  {
    ctrl_reg3.md = (uint8_t)val;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	7a3b      	ldrb	r3, [r7, #8]
 80016b0:	f362 0301 	bfi	r3, r2, #0, #2
 80016b4:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG3, (uint8_t *)&ctrl_reg3, 1);
 80016b6:	f107 0208 	add.w	r2, r7, #8
 80016ba:	2301      	movs	r3, #1
 80016bc:	2122      	movs	r1, #34	@ 0x22
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fdf9 	bl	80012b6 <lis3mdl_write_reg>
 80016c4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <lis3mdl_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG5
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  lis3mdl_ctrl_reg5_t ctrl_reg5;
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 80016dc:	f107 0208 	add.w	r2, r7, #8
 80016e0:	2301      	movs	r3, #1
 80016e2:	2124      	movs	r1, #36	@ 0x24
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fdc8 	bl	800127a <lis3mdl_read_reg>
 80016ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10f      	bne.n	8001712 <lis3mdl_block_data_update_set+0x42>
  {
    ctrl_reg5.bdu = val;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	7a3b      	ldrb	r3, [r7, #8]
 80016fc:	f362 1386 	bfi	r3, r2, #6, #1
 8001700:	723b      	strb	r3, [r7, #8]
    ret = lis3mdl_write_reg(ctx, LIS3MDL_CTRL_REG5, (uint8_t *)&ctrl_reg5, 1);
 8001702:	f107 0208 	add.w	r2, r7, #8
 8001706:	2301      	movs	r3, #1
 8001708:	2124      	movs	r1, #36	@ 0x24
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fdd3 	bl	80012b6 <lis3mdl_write_reg>
 8001710:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <lis3mdl_magnetic_raw_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_magnetic_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_OUT_X_L, (uint8_t *) buff, 6);
 8001726:	f107 020c 	add.w	r2, r7, #12
 800172a:	2306      	movs	r3, #6
 800172c:	2128      	movs	r1, #40	@ 0x28
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff fda3 	bl	800127a <lis3mdl_read_reg>
 8001734:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	b21a      	sxth	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001744:	b29b      	uxth	r3, r3
 8001746:	021b      	lsls	r3, r3, #8
 8001748:	b29b      	uxth	r3, r3
 800174a:	7b3a      	ldrb	r2, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21a      	sxth	r2, r3
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3302      	adds	r3, #2
 800175c:	b212      	sxth	r2, r2
 800175e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	3302      	adds	r3, #2
 8001764:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001768:	b29b      	uxth	r3, r3
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	7bba      	ldrb	r2, [r7, #14]
 8001770:	4413      	add	r3, r2
 8001772:	b29a      	uxth	r2, r3
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3302      	adds	r3, #2
 8001778:	b212      	sxth	r2, r2
 800177a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800177c:	7c7a      	ldrb	r2, [r7, #17]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3304      	adds	r3, #4
 8001782:	b212      	sxth	r2, r2
 8001784:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	3304      	adds	r3, #4
 800178a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178e:	b29b      	uxth	r3, r3
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b29b      	uxth	r3, r3
 8001794:	7c3a      	ldrb	r2, [r7, #16]
 8001796:	4413      	add	r3, r2
 8001798:	b29a      	uxth	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3304      	adds	r3, #4
 800179e:	b212      	sxth	r2, r2
 80017a0:	801a      	strh	r2, [r3, #0]

  return ret;
 80017a2:	697b      	ldr	r3, [r7, #20]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <lis3mdl_device_id_get>:
  * @param  val      buffer that stores data read(ptr)
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis3mdl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis3mdl_read_reg(ctx, LIS3MDL_WHO_AM_I, (uint8_t *) buff, 1);
 80017b6:	2301      	movs	r3, #1
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	210f      	movs	r1, #15
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff fd5c 	bl	800127a <lis3mdl_read_reg>
 80017c2:	60f8      	str	r0, [r7, #12]

  return ret;
 80017c4:	68fb      	ldr	r3, [r7, #12]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 f943 	bl	8001a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f80e 	bl	8001800 <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d002      	beq.n	80017f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	71fb      	strb	r3, [r7, #7]
 80017ee:	e001      	b.n	80017f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f0:	f7ff f906 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017f4:	79fb      	ldrb	r3, [r7, #7]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800180c:	4b17      	ldr	r3, [pc, #92]	@ (800186c <HAL_InitTick+0x6c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d023      	beq.n	800185c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <HAL_InitTick+0x70>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b14      	ldr	r3, [pc, #80]	@ (800186c <HAL_InitTick+0x6c>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f941 	bl	8001ab2 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10f      	bne.n	8001856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d809      	bhi.n	8001850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800183c:	2200      	movs	r2, #0
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	f04f 30ff 	mov.w	r0, #4294967295
 8001844:	f000 f919 	bl	8001a7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001848:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_InitTick+0x74>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e007      	b.n	8001860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
 8001854:	e004      	b.n	8001860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e001      	b.n	8001860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	20000134 	.word	0x20000134

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000134 	.word	0x20000134

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	@ (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	@ (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	@ 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a30:	d301      	bcc.n	8001a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a32:	2301      	movs	r3, #1
 8001a34:	e00f      	b.n	8001a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <SysTick_Config+0x40>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a3e:	210f      	movs	r1, #15
 8001a40:	f04f 30ff 	mov.w	r0, #4294967295
 8001a44:	f7ff ff8e 	bl	8001964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a48:	4b05      	ldr	r3, [pc, #20]	@ (8001a60 <SysTick_Config+0x40>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a4e:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <SysTick_Config+0x40>)
 8001a50:	2207      	movs	r2, #7
 8001a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010

08001a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ff47 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b086      	sub	sp, #24
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	60b9      	str	r1, [r7, #8]
 8001a84:	607a      	str	r2, [r7, #4]
 8001a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a8c:	f7ff ff5c 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68b9      	ldr	r1, [r7, #8]
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7ff ff8e 	bl	80019b8 <NVIC_EncodePriority>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff5d 	bl	8001964 <__NVIC_SetPriority>
}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffb0 	bl	8001a20 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b087      	sub	sp, #28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ada:	e154      	b.n	8001d86 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 8146 	beq.w	8001d80 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d005      	beq.n	8001b0c <HAL_GPIO_Init+0x40>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d130      	bne.n	8001b6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 0201 	and.w	r2, r3, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d017      	beq.n	8001baa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d123      	bne.n	8001bfe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	220f      	movs	r2, #15
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691a      	ldr	r2, [r3, #16]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	08da      	lsrs	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3208      	adds	r2, #8
 8001bf8:	6939      	ldr	r1, [r7, #16]
 8001bfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	2203      	movs	r2, #3
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4013      	ands	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0203 	and.w	r2, r3, #3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80a0 	beq.w	8001d80 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c40:	4b58      	ldr	r3, [pc, #352]	@ (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c44:	4a57      	ldr	r2, [pc, #348]	@ (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c4c:	4b55      	ldr	r3, [pc, #340]	@ (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c58:	4a53      	ldr	r2, [pc, #332]	@ (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c82:	d019      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a49      	ldr	r2, [pc, #292]	@ (8001dac <HAL_GPIO_Init+0x2e0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d013      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a48      	ldr	r2, [pc, #288]	@ (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a47      	ldr	r2, [pc, #284]	@ (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a46      	ldr	r2, [pc, #280]	@ (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	e008      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001ca8:	2307      	movs	r3, #7
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cac:	2303      	movs	r3, #3
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cca:	4937      	ldr	r1, [pc, #220]	@ (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd8:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d02:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d26:	4a25      	ldr	r2, [pc, #148]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d2c:	4b23      	ldr	r3, [pc, #140]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d50:	4a1a      	ldr	r2, [pc, #104]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d7a:	4a10      	ldr	r2, [pc, #64]	@ (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f47f aea3 	bne.w	8001adc <HAL_GPIO_Init+0x10>
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	48000400 	.word	0x48000400
 8001db0:	48000800 	.word	0x48000800
 8001db4:	48000c00 	.word	0x48000c00
 8001db8:	48001000 	.word	0x48001000
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd0:	787b      	ldrb	r3, [r7, #1]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dd6:	887a      	ldrh	r2, [r7, #2]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ddc:	e002      	b.n	8001de4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43d9      	mvns	r1, r3
 8001e0e:	887b      	ldrh	r3, [r7, #2]
 8001e10:	400b      	ands	r3, r1
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	619a      	str	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e28:	4b04      	ldr	r3, [pc, #16]	@ (8001e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40007000 	.word	0x40007000

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e4e:	d130      	bne.n	8001eb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e50:	4b23      	ldr	r3, [pc, #140]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5c:	d038      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e66:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2232      	movs	r2, #50	@ 0x32
 8001e74:	fb02 f303 	mul.w	r3, r2, r3
 8001e78:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e84:	e002      	b.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e98:	d102      	bne.n	8001ea0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f2      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eac:	d110      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e00f      	b.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ebe:	d007      	beq.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec8:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ece:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	431bde83 	.word	0x431bde83

08001eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d102      	bne.n	8001f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 bc02 	b.w	8002704 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f00:	4b96      	ldr	r3, [pc, #600]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0a:	4b94      	ldr	r3, [pc, #592]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80e4 	beq.w	80020ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4c>
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	f040 808b 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	f040 8087 	bne.w	8002046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f38:	4b88      	ldr	r3, [pc, #544]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x64>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e3d9      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1a      	ldr	r2, [r3, #32]
 8001f54:	4b81      	ldr	r3, [pc, #516]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d004      	beq.n	8001f6a <HAL_RCC_OscConfig+0x7e>
 8001f60:	4b7e      	ldr	r3, [pc, #504]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f68:	e005      	b.n	8001f76 <HAL_RCC_OscConfig+0x8a>
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d223      	bcs.n	8001fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 fd54 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e3ba      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f8e:	4b73      	ldr	r3, [pc, #460]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a72      	ldr	r2, [pc, #456]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f94:	f043 0308 	orr.w	r3, r3, #8
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b70      	ldr	r3, [pc, #448]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	496d      	ldr	r1, [pc, #436]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fac:	4b6b      	ldr	r3, [pc, #428]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	4968      	ldr	r1, [pc, #416]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
 8001fc0:	e025      	b.n	800200e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc2:	4b66      	ldr	r3, [pc, #408]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a65      	ldr	r2, [pc, #404]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b63      	ldr	r3, [pc, #396]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4960      	ldr	r1, [pc, #384]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	495b      	ldr	r1, [pc, #364]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fd14 	bl	8002a2c <RCC_SetFlashLatencyFromMSIRange>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e37a      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200e:	f000 fc81 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b51      	ldr	r3, [pc, #324]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	4950      	ldr	r1, [pc, #320]	@ (8002160 <HAL_RCC_OscConfig+0x274>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a4e      	ldr	r2, [pc, #312]	@ (8002164 <HAL_RCC_OscConfig+0x278>)
 800202c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800202e:	4b4e      	ldr	r3, [pc, #312]	@ (8002168 <HAL_RCC_OscConfig+0x27c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fbe4 	bl	8001800 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d052      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	e35e      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d032      	beq.n	80020b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800204e:	4b43      	ldr	r3, [pc, #268]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a42      	ldr	r2, [pc, #264]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205a:	f7ff fc21 	bl	80018a0 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002062:	f7ff fc1d 	bl	80018a0 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e347      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002074:	4b39      	ldr	r3, [pc, #228]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002080:	4b36      	ldr	r3, [pc, #216]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a35      	ldr	r2, [pc, #212]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b33      	ldr	r3, [pc, #204]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	4930      	ldr	r1, [pc, #192]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209e:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	492b      	ldr	r1, [pc, #172]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e01a      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b4:	4b29      	ldr	r3, [pc, #164]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a28      	ldr	r2, [pc, #160]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c0:	f7ff fbee 	bl	80018a0 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c8:	f7ff fbea 	bl	80018a0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e314      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020da:	4b20      	ldr	r3, [pc, #128]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1dc>
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d073      	beq.n	80021de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_OscConfig+0x21c>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d10e      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d063      	beq.n	80021dc <HAL_RCC_OscConfig+0x2f0>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d15f      	bne.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e2f1      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x24c>
 800212a:	4b0c      	ldr	r3, [pc, #48]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0b      	ldr	r2, [pc, #44]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e025      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002140:	d114      	bne.n	800216c <HAL_RCC_OscConfig+0x280>
 8002142:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a05      	ldr	r2, [pc, #20]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b03      	ldr	r3, [pc, #12]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a02      	ldr	r2, [pc, #8]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e013      	b.n	8002184 <HAL_RCC_OscConfig+0x298>
 800215c:	40021000 	.word	0x40021000
 8002160:	08004934 	.word	0x08004934
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004
 800216c:	4ba0      	ldr	r3, [pc, #640]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a9f      	ldr	r2, [pc, #636]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b9d      	ldr	r3, [pc, #628]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a9c      	ldr	r2, [pc, #624]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fb88 	bl	80018a0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fb84 	bl	80018a0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e2ae      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b92      	ldr	r3, [pc, #584]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x2a8>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fb74 	bl	80018a0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7ff fb70 	bl	80018a0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e29a      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b88      	ldr	r3, [pc, #544]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x2d0>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d060      	beq.n	80022ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d005      	beq.n	80021fc <HAL_RCC_OscConfig+0x310>
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d119      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d116      	bne.n	800222a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fc:	4b7c      	ldr	r3, [pc, #496]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_OscConfig+0x328>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e277      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002214:	4b76      	ldr	r3, [pc, #472]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	4973      	ldr	r1, [pc, #460]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002228:	e040      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d023      	beq.n	800227a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002232:	4b6f      	ldr	r3, [pc, #444]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7ff fb2f 	bl	80018a0 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002246:	f7ff fb2b 	bl	80018a0 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e255      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002258:	4b65      	ldr	r3, [pc, #404]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b62      	ldr	r3, [pc, #392]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	495f      	ldr	r1, [pc, #380]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e018      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227a:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a5c      	ldr	r2, [pc, #368]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7ff fb0b 	bl	80018a0 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff fb07 	bl	80018a0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e231      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a0:	4b53      	ldr	r3, [pc, #332]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03c      	beq.n	8002332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01c      	beq.n	80022fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c0:	4b4b      	ldr	r3, [pc, #300]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022c6:	4a4a      	ldr	r2, [pc, #296]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff fae6 	bl	80018a0 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d8:	f7ff fae2 	bl	80018a0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e20c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ea:	4b41      	ldr	r3, [pc, #260]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0ef      	beq.n	80022d8 <HAL_RCC_OscConfig+0x3ec>
 80022f8:	e01b      	b.n	8002332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fa:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002300:	4a3b      	ldr	r2, [pc, #236]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7ff fac9 	bl	80018a0 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002312:	f7ff fac5 	bl	80018a0 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e1ef      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002324:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ef      	bne.n	8002312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80a6 	beq.w	800248c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002344:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d10d      	bne.n	800236c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	@ 0x58
 800235c:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002368:	2301      	movs	r3, #1
 800236a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236c:	4b21      	ldr	r3, [pc, #132]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d118      	bne.n	80023aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002378:	4b1e      	ldr	r3, [pc, #120]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1d      	ldr	r2, [pc, #116]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 800237e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002384:	f7ff fa8c 	bl	80018a0 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800238c:	f7ff fa88 	bl	80018a0 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e1b2      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_RCC_OscConfig+0x508>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d108      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4d8>
 80023b2:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c2:	e029      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d115      	bne.n	80023f8 <HAL_RCC_OscConfig+0x50c>
 80023cc:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d2:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a03      	ldr	r2, [pc, #12]	@ (80023f0 <HAL_RCC_OscConfig+0x504>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x52c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
 80023f8:	4b9a      	ldr	r3, [pc, #616]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023fe:	4a99      	ldr	r2, [pc, #612]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002408:	4b96      	ldr	r3, [pc, #600]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800240e:	4a95      	ldr	r2, [pc, #596]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d016      	beq.n	800244e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002420:	f7ff fa3e 	bl	80018a0 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	e00a      	b.n	800243e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002428:	f7ff fa3a 	bl	80018a0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e162      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	4b89      	ldr	r3, [pc, #548]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d0ed      	beq.n	8002428 <HAL_RCC_OscConfig+0x53c>
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7ff fa27 	bl	80018a0 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7ff fa23 	bl	80018a0 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e14b      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246c:	4b7d      	ldr	r3, [pc, #500]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1ed      	bne.n	8002456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d105      	bne.n	800248c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002480:	4b78      	ldr	r3, [pc, #480]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	4a77      	ldr	r2, [pc, #476]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d03c      	beq.n	8002512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a0:	4b70      	ldr	r3, [pc, #448]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80024a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff f9f6 	bl	80018a0 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b8:	f7ff f9f2 	bl	80018a0 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e11c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ca:	4b66      	ldr	r3, [pc, #408]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80024cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0ef      	beq.n	80024b8 <HAL_RCC_OscConfig+0x5cc>
 80024d8:	e01b      	b.n	8002512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024da:	4b62      	ldr	r3, [pc, #392]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024e0:	4a60      	ldr	r2, [pc, #384]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ea:	f7ff f9d9 	bl	80018a0 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024f2:	f7ff f9d5 	bl	80018a0 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0ff      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002504:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002506:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ef      	bne.n	80024f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 80f3 	beq.w	8002702 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	2b02      	cmp	r3, #2
 8002522:	f040 80c9 	bne.w	80026b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002526:	4b4f      	ldr	r3, [pc, #316]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	429a      	cmp	r2, r3
 8002538:	d12c      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	3b01      	subs	r3, #1
 8002546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d123      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d11b      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d113      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002576:	085b      	lsrs	r3, r3, #1
 8002578:	3b01      	subs	r3, #1
 800257a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d109      	bne.n	8002594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	3b01      	subs	r3, #1
 800258e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d06b      	beq.n	800266c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b0c      	cmp	r3, #12
 8002598:	d062      	beq.n	8002660 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e0ac      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80025b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025b6:	f7ff f973 	bl	80018a0 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff f96f 	bl	80018a0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e099      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d0:	4b24      	ldr	r3, [pc, #144]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025dc:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	4b21      	ldr	r3, [pc, #132]	@ (8002668 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	4013      	ands	r3, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025ec:	3a01      	subs	r2, #1
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	4311      	orrs	r1, r2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025f6:	0212      	lsls	r2, r2, #8
 80025f8:	4311      	orrs	r1, r2
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025fe:	0852      	lsrs	r2, r2, #1
 8002600:	3a01      	subs	r2, #1
 8002602:	0552      	lsls	r2, r2, #21
 8002604:	4311      	orrs	r1, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800260a:	0852      	lsrs	r2, r2, #1
 800260c:	3a01      	subs	r2, #1
 800260e:	0652      	lsls	r2, r2, #25
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002616:	06d2      	lsls	r2, r2, #27
 8002618:	430a      	orrs	r2, r1
 800261a:	4912      	ldr	r1, [pc, #72]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 800261c:	4313      	orrs	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002620:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800262c:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a0c      	ldr	r2, [pc, #48]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002632:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002638:	f7ff f932 	bl	80018a0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002640:	f7ff f92e 	bl	80018a0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e058      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <HAL_RCC_OscConfig+0x778>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265e:	e050      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e04f      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
 8002664:	40021000 	.word	0x40021000
 8002668:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266c:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d144      	bne.n	8002702 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a23      	ldr	r2, [pc, #140]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 800267e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002682:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002684:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a20      	ldr	r2, [pc, #128]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 800268a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800268e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002690:	f7ff f906 	bl	80018a0 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002698:	f7ff f902 	bl	80018a0 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e02c      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x7ac>
 80026b6:	e024      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d01f      	beq.n	80026fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b13      	ldr	r3, [pc, #76]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 80026c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7ff f8e9 	bl	80018a0 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d2:	f7ff f8e5 	bl	80018a0 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e00f      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4905      	ldr	r1, [pc, #20]	@ (800270c <HAL_RCC_OscConfig+0x820>)
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_RCC_OscConfig+0x824>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60cb      	str	r3, [r1, #12]
 80026fc:	e001      	b.n	8002702 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3720      	adds	r7, #32
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	feeefffc 	.word	0xfeeefffc

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0e7      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b75      	ldr	r3, [pc, #468]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d910      	bls.n	8002758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b72      	ldr	r3, [pc, #456]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4970      	ldr	r1, [pc, #448]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b6e      	ldr	r3, [pc, #440]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e0cf      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d010      	beq.n	8002786 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b66      	ldr	r3, [pc, #408]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002770:	429a      	cmp	r2, r3
 8002772:	d908      	bls.n	8002786 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b63      	ldr	r3, [pc, #396]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4960      	ldr	r1, [pc, #384]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d04c      	beq.n	800282c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b03      	cmp	r3, #3
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b5a      	ldr	r3, [pc, #360]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d121      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0a6      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b2:	4b54      	ldr	r3, [pc, #336]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e09a      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e08e      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027da:	4b4a      	ldr	r3, [pc, #296]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e086      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ea:	4b46      	ldr	r3, [pc, #280]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f023 0203 	bic.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	4943      	ldr	r1, [pc, #268]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fc:	f7ff f850 	bl	80018a0 <HAL_GetTick>
 8002800:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	e00a      	b.n	800281a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002804:	f7ff f84c 	bl	80018a0 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e06e      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281a:	4b3a      	ldr	r3, [pc, #232]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 020c 	and.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	429a      	cmp	r2, r3
 800282a:	d1eb      	bne.n	8002804 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4b31      	ldr	r3, [pc, #196]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002844:	429a      	cmp	r2, r3
 8002846:	d208      	bcs.n	800285a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b2e      	ldr	r3, [pc, #184]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	492b      	ldr	r1, [pc, #172]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800285a:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d210      	bcs.n	800288a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002868:	4b25      	ldr	r3, [pc, #148]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 0207 	bic.w	r2, r3, #7
 8002870:	4923      	ldr	r1, [pc, #140]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <HAL_RCC_ClockConfig+0x1ec>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e036      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002896:	4b1b      	ldr	r3, [pc, #108]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	4918      	ldr	r1, [pc, #96]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d009      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4910      	ldr	r1, [pc, #64]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c8:	f000 f824 	bl	8002914 <HAL_RCC_GetSysClockFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002904 <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f003 030f 	and.w	r3, r3, #15
 80028d8:	490b      	ldr	r1, [pc, #44]	@ (8002908 <HAL_RCC_ClockConfig+0x1f4>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
 80028e4:	4a09      	ldr	r2, [pc, #36]	@ (800290c <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028e8:	4b09      	ldr	r3, [pc, #36]	@ (8002910 <HAL_RCC_ClockConfig+0x1fc>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff87 	bl	8001800 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028f6:	7afb      	ldrb	r3, [r7, #11]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40022000 	.word	0x40022000
 8002904:	40021000 	.word	0x40021000
 8002908:	08004934 	.word	0x08004934
 800290c:	20000000 	.word	0x20000000
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b089      	sub	sp, #36	@ 0x24
 8002918:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002922:	4b3e      	ldr	r3, [pc, #248]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 030c 	and.w	r3, r3, #12
 800292a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800292c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_GetSysClockFreq+0x34>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2b0c      	cmp	r3, #12
 8002940:	d121      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d11e      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002948:	4b34      	ldr	r3, [pc, #208]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d107      	bne.n	8002964 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002954:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800295a:	0a1b      	lsrs	r3, r3, #8
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	e005      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002964:	4b2d      	ldr	r3, [pc, #180]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002970:	4a2b      	ldr	r2, [pc, #172]	@ (8002a20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002978:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002984:	e00a      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b04      	cmp	r3, #4
 800298a:	d102      	bne.n	8002992 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800298c:	4b25      	ldr	r3, [pc, #148]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x110>)
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e004      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d101      	bne.n	800299c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002998:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x114>)
 800299a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d134      	bne.n	8002a0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0xa6>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d003      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0xac>
 80029b8:	e005      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002a24 <HAL_RCC_GetSysClockFreq+0x110>)
 80029bc:	617b      	str	r3, [r7, #20]
      break;
 80029be:	e005      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029c0:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c2:	617b      	str	r3, [r7, #20]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	617b      	str	r3, [r7, #20]
      break;
 80029ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029cc:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	3301      	adds	r3, #1
 80029d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	fb03 f202 	mul.w	r2, r3, r2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a1c <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	0e5b      	lsrs	r3, r3, #25
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	3301      	adds	r3, #1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	@ 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	08004944 	.word	0x08004944
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	007a1200 	.word	0x007a1200

08002a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a34:	2300      	movs	r3, #0
 8002a36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a44:	f7ff f9ee 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a48:	6178      	str	r0, [r7, #20]
 8002a4a:	e014      	b.n	8002a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	4a24      	ldr	r2, [pc, #144]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a58:	4b22      	ldr	r3, [pc, #136]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a64:	f7ff f9de 	bl	8001e24 <HAL_PWREx_GetVoltageRange>
 8002a68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a7c:	d10b      	bne.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b80      	cmp	r3, #128	@ 0x80
 8002a82:	d919      	bls.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2ba0      	cmp	r3, #160	@ 0xa0
 8002a88:	d902      	bls.n	8002a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e013      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a90:	2301      	movs	r3, #1
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	e010      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b80      	cmp	r3, #128	@ 0x80
 8002a9a:	d902      	bls.n	8002aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e00a      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d102      	bne.n	8002aae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	e004      	b.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b70      	cmp	r3, #112	@ 0x70
 8002ab2:	d101      	bne.n	8002ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 0207 	bic.w	r2, r3, #7
 8002ac0:	4909      	ldr	r1, [pc, #36]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ac8:	4b07      	ldr	r3, [pc, #28]	@ (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d001      	beq.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40022000 	.word	0x40022000

08002aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e095      	b.n	8002c2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d108      	bne.n	8002b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b0e:	d009      	beq.n	8002b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
 8002b16:	e005      	b.n	8002b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f877 	bl	8002c32 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b64:	d902      	bls.n	8002b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e002      	b.n	8002b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b7a:	d007      	beq.n	8002b8c <HAL_SPI_Init+0xa0>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bce:	ea42 0103 	orr.w	r1, r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	0c1b      	lsrs	r3, r3, #16
 8002be8:	f003 0204 	and.w	r2, r3, #4
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c56:	f7fe fe23 	bl	80018a0 <HAL_GetTick>
 8002c5a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d001      	beq.n	8002c70 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e15c      	b.n	8002f2a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <HAL_SPI_Transmit+0x36>
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e154      	b.n	8002f2a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_SPI_Transmit+0x48>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e14d      	b.n	8002f2a <HAL_SPI_Transmit+0x2e4>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	88fa      	ldrh	r2, [r7, #6]
 8002cae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	88fa      	ldrh	r2, [r7, #6]
 8002cb4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ce0:	d10f      	bne.n	8002d02 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d0c:	2b40      	cmp	r3, #64	@ 0x40
 8002d0e:	d007      	beq.n	8002d20 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d28:	d952      	bls.n	8002dd0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Transmit+0xf2>
 8002d32:	8b7b      	ldrh	r3, [r7, #26]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d145      	bne.n	8002dc4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d5c:	e032      	b.n	8002dc4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d112      	bne.n	8002d92 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7c:	1c9a      	adds	r2, r3, #2
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d90:	e018      	b.n	8002dc4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d92:	f7fe fd85 	bl	80018a0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d803      	bhi.n	8002daa <HAL_SPI_Transmit+0x164>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d102      	bne.n	8002db0 <HAL_SPI_Transmit+0x16a>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e0b2      	b.n	8002f2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1c7      	bne.n	8002d5e <HAL_SPI_Transmit+0x118>
 8002dce:	e083      	b.n	8002ed8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_Transmit+0x198>
 8002dd8:	8b7b      	ldrh	r3, [r7, #26]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d177      	bne.n	8002ece <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d912      	bls.n	8002e0e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b02      	subs	r3, #2
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e0c:	e05f      	b.n	8002ece <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e34:	e04b      	b.n	8002ece <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d12b      	bne.n	8002e9c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d912      	bls.n	8002e74 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5e:	1c9a      	adds	r2, r3, #2
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b02      	subs	r3, #2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e72:	e02c      	b.n	8002ece <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e9a:	e018      	b.n	8002ece <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9c:	f7fe fd00 	bl	80018a0 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d803      	bhi.n	8002eb4 <HAL_SPI_Transmit+0x26e>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d102      	bne.n	8002eba <HAL_SPI_Transmit+0x274>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e02d      	b.n	8002f2a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1ae      	bne.n	8002e36 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ed8:	69fa      	ldr	r2, [r7, #28]
 8002eda:	6839      	ldr	r1, [r7, #0]
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fd03 	bl	80038e8 <SPI_EndRxTxTransaction>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10a      	bne.n	8002f0c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002f28:	2300      	movs	r3, #0
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b088      	sub	sp, #32
 8002f36:	af02      	add	r7, sp, #8
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	603b      	str	r3, [r7, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d001      	beq.n	8002f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e123      	b.n	800319a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f5a:	d112      	bne.n	8002f82 <HAL_SPI_Receive+0x50>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10e      	bne.n	8002f82 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2204      	movs	r2, #4
 8002f68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f6c:	88fa      	ldrh	r2, [r7, #6]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f912 	bl	80031a2 <HAL_SPI_TransmitReceive>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	e10b      	b.n	800319a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f82:	f7fe fc8d 	bl	80018a0 <HAL_GetTick>
 8002f86:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <HAL_SPI_Receive+0x62>
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e100      	b.n	800319a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_SPI_Receive+0x74>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0f9      	b.n	800319a <HAL_SPI_Receive+0x268>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	88fa      	ldrh	r2, [r7, #6]
 8002fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ff8:	d908      	bls.n	800300c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	e007      	b.n	800301c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800301a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003024:	d10f      	bne.n	8003046 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003034:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003050:	2b40      	cmp	r3, #64	@ 0x40
 8003052:	d007      	beq.n	8003064 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003062:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800306c:	d875      	bhi.n	800315a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800306e:	e037      	b.n	80030e0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b01      	cmp	r3, #1
 800307c:	d117      	bne.n	80030ae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f103 020c 	add.w	r2, r3, #12
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	7812      	ldrb	r2, [r2, #0]
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80030ac:	e018      	b.n	80030e0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030ae:	f7fe fbf7 	bl	80018a0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d803      	bhi.n	80030c6 <HAL_SPI_Receive+0x194>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d102      	bne.n	80030cc <HAL_SPI_Receive+0x19a>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e05c      	b.n	800319a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1c1      	bne.n	8003070 <HAL_SPI_Receive+0x13e>
 80030ec:	e03b      	b.n	8003166 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d115      	bne.n	8003128 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	b292      	uxth	r2, r2
 8003108:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003126:	e018      	b.n	800315a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003128:	f7fe fbba 	bl	80018a0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d803      	bhi.n	8003140 <HAL_SPI_Receive+0x20e>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d102      	bne.n	8003146 <HAL_SPI_Receive+0x214>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e01f      	b.n	800319a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1c3      	bne.n	80030ee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	6839      	ldr	r1, [r7, #0]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fb64 	bl	8003838 <SPI_EndRxTransaction>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003198:	2300      	movs	r3, #0
  }
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08a      	sub	sp, #40	@ 0x28
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031b0:	2301      	movs	r3, #1
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b4:	f7fe fb74 	bl	80018a0 <HAL_GetTick>
 80031b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d00c      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x4e>
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031dc:	d106      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x4a>
 80031e6:	7ffb      	ldrb	r3, [r7, #31]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d001      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
 80031ee:	e1f3      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x60>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_TransmitReceive+0x60>
 80031fc:	887b      	ldrh	r3, [r7, #2]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e1e8      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_SPI_TransmitReceive+0x72>
 8003210:	2302      	movs	r3, #2
 8003212:	e1e1      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b04      	cmp	r3, #4
 8003226:	d003      	beq.n	8003230 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2205      	movs	r2, #5
 800322c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	887a      	ldrh	r2, [r7, #2]
 8003256:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	887a      	ldrh	r2, [r7, #2]
 800325c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003272:	d802      	bhi.n	800327a <HAL_SPI_TransmitReceive+0xd8>
 8003274:	8abb      	ldrh	r3, [r7, #20]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d908      	bls.n	800328c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e007      	b.n	800329c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800329a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a6:	2b40      	cmp	r3, #64	@ 0x40
 80032a8:	d007      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032c2:	f240 8083 	bls.w	80033cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x132>
 80032ce:	8afb      	ldrh	r3, [r7, #22]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d16f      	bne.n	80033b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f8:	e05c      	b.n	80033b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d11b      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x19e>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x19e>
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	2b01      	cmp	r3, #1
 8003316:	d113      	bne.n	8003340 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331c:	881a      	ldrh	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003328:	1c9a      	adds	r2, r3, #2
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003332:	b29b      	uxth	r3, r3
 8003334:	3b01      	subs	r3, #1
 8003336:	b29a      	uxth	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d11c      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x1e6>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	b292      	uxth	r2, r2
 8003366:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	1c9a      	adds	r2, r3, #2
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003378:	b29b      	uxth	r3, r3
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003384:	2301      	movs	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003388:	f7fe fa8a 	bl	80018a0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003394:	429a      	cmp	r2, r3
 8003396:	d80d      	bhi.n	80033b4 <HAL_SPI_TransmitReceive+0x212>
 8003398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339e:	d009      	beq.n	80033b4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e111      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d19d      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x158>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d197      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x158>
 80033ca:	e0e5      	b.n	8003598 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_SPI_TransmitReceive+0x23a>
 80033d4:	8afb      	ldrh	r3, [r7, #22]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	f040 80d1 	bne.w	800357e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d912      	bls.n	800340c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ea:	881a      	ldrh	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033f6:	1c9a      	adds	r2, r3, #2
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b02      	subs	r3, #2
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800340a:	e0b8      	b.n	800357e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	330c      	adds	r3, #12
 8003416:	7812      	ldrb	r2, [r2, #0]
 8003418:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003432:	e0a4      	b.n	800357e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b02      	cmp	r3, #2
 8003440:	d134      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x30a>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d02f      	beq.n	80034ac <HAL_SPI_TransmitReceive+0x30a>
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	2b01      	cmp	r3, #1
 8003450:	d12c      	bne.n	80034ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d912      	bls.n	8003482 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b02      	subs	r3, #2
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003480:	e012      	b.n	80034a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d148      	bne.n	800354c <HAL_SPI_TransmitReceive+0x3aa>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d042      	beq.n	800354c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d923      	bls.n	800351a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	b292      	uxth	r2, r2
 80034de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	1c9a      	adds	r2, r3, #2
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b02      	subs	r3, #2
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d81f      	bhi.n	8003548 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003516:	605a      	str	r2, [r3, #4]
 8003518:	e016      	b.n	8003548 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f103 020c 	add.w	r2, r3, #12
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003548:	2301      	movs	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800354c:	f7fe f9a8 	bl	80018a0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003558:	429a      	cmp	r2, r3
 800355a:	d803      	bhi.n	8003564 <HAL_SPI_TransmitReceive+0x3c2>
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d102      	bne.n	800356a <HAL_SPI_TransmitReceive+0x3c8>
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e02c      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	f47f af55 	bne.w	8003434 <HAL_SPI_TransmitReceive+0x292>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f47f af4e 	bne.w	8003434 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003598:	6a3a      	ldr	r2, [r7, #32]
 800359a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f9a3 	bl	80038e8 <SPI_EndRxTxTransaction>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e00e      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80035d6:	2300      	movs	r3, #0
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	@ 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035ee:	b2db      	uxtb	r3, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800360c:	f7fe f948 	bl	80018a0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	4413      	add	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800361c:	f7fe f940 	bl	80018a0 <HAL_GetTick>
 8003620:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003622:	4b39      	ldr	r3, [pc, #228]	@ (8003708 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	015b      	lsls	r3, r3, #5
 8003628:	0d1b      	lsrs	r3, r3, #20
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003632:	e054      	b.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d050      	beq.n	80036de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800363c:	f7fe f930 	bl	80018a0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69fa      	ldr	r2, [r7, #28]
 8003648:	429a      	cmp	r2, r3
 800364a:	d902      	bls.n	8003652 <SPI_WaitFlagStateUntilTimeout+0x56>
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13d      	bne.n	80036ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003660:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800366a:	d111      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003674:	d004      	beq.n	8003680 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367e:	d107      	bne.n	8003690 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800368e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003698:	d10f      	bne.n	80036ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e017      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3b01      	subs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4013      	ands	r3, r2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	bf0c      	ite	eq
 80036ee:	2301      	moveq	r3, #1
 80036f0:	2300      	movne	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d19b      	bne.n	8003634 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3720      	adds	r7, #32
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000000 	.word	0x20000000

0800370c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08a      	sub	sp, #40	@ 0x28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800371e:	f7fe f8bf 	bl	80018a0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	4413      	add	r3, r2
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800372e:	f7fe f8b7 	bl	80018a0 <HAL_GetTick>
 8003732:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800373c:	4b3d      	ldr	r3, [pc, #244]	@ (8003834 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	00da      	lsls	r2, r3, #3
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	0d1b      	lsrs	r3, r3, #20
 800374c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374e:	fb02 f303 	mul.w	r3, r2, r3
 8003752:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003754:	e060      	b.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800375c:	d107      	bne.n	800376e <SPI_WaitFifoStateUntilTimeout+0x62>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d104      	bne.n	800376e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800376c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d050      	beq.n	8003818 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003776:	f7fe f893 	bl	80018a0 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003782:	429a      	cmp	r2, r3
 8003784:	d902      	bls.n	800378c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d13d      	bne.n	8003808 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800379a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037a4:	d111      	bne.n	80037ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ae:	d004      	beq.n	80037ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037b8:	d107      	bne.n	80037ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d2:	d10f      	bne.n	80037f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e010      	b.n	800382a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	3b01      	subs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	429a      	cmp	r2, r3
 8003826:	d196      	bne.n	8003756 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3728      	adds	r7, #40	@ 0x28
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000000 	.word	0x20000000

08003838 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af02      	add	r7, sp, #8
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800384c:	d111      	bne.n	8003872 <SPI_EndRxTransaction+0x3a>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003856:	d004      	beq.n	8003862 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003860:	d107      	bne.n	8003872 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f7ff febd 	bl	80035fc <SPI_WaitFlagStateUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388c:	f043 0220 	orr.w	r2, r3, #32
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e023      	b.n	80038e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038a0:	d11d      	bne.n	80038de <SPI_EndRxTransaction+0xa6>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038aa:	d004      	beq.n	80038b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b4:	d113      	bne.n	80038de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2200      	movs	r2, #0
 80038be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f7ff ff22 	bl	800370c <SPI_WaitFifoStateUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d007      	beq.n	80038de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038d2:	f043 0220 	orr.w	r2, r3, #32
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e000      	b.n	80038e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	f7ff ff03 	bl	800370c <SPI_WaitFifoStateUntilTimeout>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003910:	f043 0220 	orr.w	r2, r3, #32
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e027      	b.n	800396c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f7ff fe68 	bl	80035fc <SPI_WaitFlagStateUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e014      	b.n	800396c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2200      	movs	r2, #0
 800394a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f7ff fedc 	bl	800370c <SPI_WaitFifoStateUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d007      	beq.n	800396a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e000      	b.n	800396c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <std>:
 8003974:	2300      	movs	r3, #0
 8003976:	b510      	push	{r4, lr}
 8003978:	4604      	mov	r4, r0
 800397a:	e9c0 3300 	strd	r3, r3, [r0]
 800397e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003982:	6083      	str	r3, [r0, #8]
 8003984:	8181      	strh	r1, [r0, #12]
 8003986:	6643      	str	r3, [r0, #100]	@ 0x64
 8003988:	81c2      	strh	r2, [r0, #14]
 800398a:	6183      	str	r3, [r0, #24]
 800398c:	4619      	mov	r1, r3
 800398e:	2208      	movs	r2, #8
 8003990:	305c      	adds	r0, #92	@ 0x5c
 8003992:	f000 f9f9 	bl	8003d88 <memset>
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <std+0x58>)
 8003998:	6263      	str	r3, [r4, #36]	@ 0x24
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <std+0x5c>)
 800399c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800399e:	4b0d      	ldr	r3, [pc, #52]	@ (80039d4 <std+0x60>)
 80039a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039a2:	4b0d      	ldr	r3, [pc, #52]	@ (80039d8 <std+0x64>)
 80039a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <std+0x68>)
 80039a8:	6224      	str	r4, [r4, #32]
 80039aa:	429c      	cmp	r4, r3
 80039ac:	d006      	beq.n	80039bc <std+0x48>
 80039ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039b2:	4294      	cmp	r4, r2
 80039b4:	d002      	beq.n	80039bc <std+0x48>
 80039b6:	33d0      	adds	r3, #208	@ 0xd0
 80039b8:	429c      	cmp	r4, r3
 80039ba:	d105      	bne.n	80039c8 <std+0x54>
 80039bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039c4:	f000 ba58 	b.w	8003e78 <__retarget_lock_init_recursive>
 80039c8:	bd10      	pop	{r4, pc}
 80039ca:	bf00      	nop
 80039cc:	08003bd9 	.word	0x08003bd9
 80039d0:	08003bfb 	.word	0x08003bfb
 80039d4:	08003c33 	.word	0x08003c33
 80039d8:	08003c57 	.word	0x08003c57
 80039dc:	20000138 	.word	0x20000138

080039e0 <stdio_exit_handler>:
 80039e0:	4a02      	ldr	r2, [pc, #8]	@ (80039ec <stdio_exit_handler+0xc>)
 80039e2:	4903      	ldr	r1, [pc, #12]	@ (80039f0 <stdio_exit_handler+0x10>)
 80039e4:	4803      	ldr	r0, [pc, #12]	@ (80039f4 <stdio_exit_handler+0x14>)
 80039e6:	f000 b869 	b.w	8003abc <_fwalk_sglue>
 80039ea:	bf00      	nop
 80039ec:	2000000c 	.word	0x2000000c
 80039f0:	08004715 	.word	0x08004715
 80039f4:	2000001c 	.word	0x2000001c

080039f8 <cleanup_stdio>:
 80039f8:	6841      	ldr	r1, [r0, #4]
 80039fa:	4b0c      	ldr	r3, [pc, #48]	@ (8003a2c <cleanup_stdio+0x34>)
 80039fc:	4299      	cmp	r1, r3
 80039fe:	b510      	push	{r4, lr}
 8003a00:	4604      	mov	r4, r0
 8003a02:	d001      	beq.n	8003a08 <cleanup_stdio+0x10>
 8003a04:	f000 fe86 	bl	8004714 <_fflush_r>
 8003a08:	68a1      	ldr	r1, [r4, #8]
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <cleanup_stdio+0x38>)
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	d002      	beq.n	8003a16 <cleanup_stdio+0x1e>
 8003a10:	4620      	mov	r0, r4
 8003a12:	f000 fe7f 	bl	8004714 <_fflush_r>
 8003a16:	68e1      	ldr	r1, [r4, #12]
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <cleanup_stdio+0x3c>)
 8003a1a:	4299      	cmp	r1, r3
 8003a1c:	d004      	beq.n	8003a28 <cleanup_stdio+0x30>
 8003a1e:	4620      	mov	r0, r4
 8003a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a24:	f000 be76 	b.w	8004714 <_fflush_r>
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000138 	.word	0x20000138
 8003a30:	200001a0 	.word	0x200001a0
 8003a34:	20000208 	.word	0x20000208

08003a38 <global_stdio_init.part.0>:
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a68 <global_stdio_init.part.0+0x30>)
 8003a3c:	4c0b      	ldr	r4, [pc, #44]	@ (8003a6c <global_stdio_init.part.0+0x34>)
 8003a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003a70 <global_stdio_init.part.0+0x38>)
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	4620      	mov	r0, r4
 8003a44:	2200      	movs	r2, #0
 8003a46:	2104      	movs	r1, #4
 8003a48:	f7ff ff94 	bl	8003974 <std>
 8003a4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a50:	2201      	movs	r2, #1
 8003a52:	2109      	movs	r1, #9
 8003a54:	f7ff ff8e 	bl	8003974 <std>
 8003a58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a62:	2112      	movs	r1, #18
 8003a64:	f7ff bf86 	b.w	8003974 <std>
 8003a68:	20000270 	.word	0x20000270
 8003a6c:	20000138 	.word	0x20000138
 8003a70:	080039e1 	.word	0x080039e1

08003a74 <__sfp_lock_acquire>:
 8003a74:	4801      	ldr	r0, [pc, #4]	@ (8003a7c <__sfp_lock_acquire+0x8>)
 8003a76:	f000 ba00 	b.w	8003e7a <__retarget_lock_acquire_recursive>
 8003a7a:	bf00      	nop
 8003a7c:	20000279 	.word	0x20000279

08003a80 <__sfp_lock_release>:
 8003a80:	4801      	ldr	r0, [pc, #4]	@ (8003a88 <__sfp_lock_release+0x8>)
 8003a82:	f000 b9fb 	b.w	8003e7c <__retarget_lock_release_recursive>
 8003a86:	bf00      	nop
 8003a88:	20000279 	.word	0x20000279

08003a8c <__sinit>:
 8003a8c:	b510      	push	{r4, lr}
 8003a8e:	4604      	mov	r4, r0
 8003a90:	f7ff fff0 	bl	8003a74 <__sfp_lock_acquire>
 8003a94:	6a23      	ldr	r3, [r4, #32]
 8003a96:	b11b      	cbz	r3, 8003aa0 <__sinit+0x14>
 8003a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a9c:	f7ff bff0 	b.w	8003a80 <__sfp_lock_release>
 8003aa0:	4b04      	ldr	r3, [pc, #16]	@ (8003ab4 <__sinit+0x28>)
 8003aa2:	6223      	str	r3, [r4, #32]
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <__sinit+0x2c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f5      	bne.n	8003a98 <__sinit+0xc>
 8003aac:	f7ff ffc4 	bl	8003a38 <global_stdio_init.part.0>
 8003ab0:	e7f2      	b.n	8003a98 <__sinit+0xc>
 8003ab2:	bf00      	nop
 8003ab4:	080039f9 	.word	0x080039f9
 8003ab8:	20000270 	.word	0x20000270

08003abc <_fwalk_sglue>:
 8003abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ac0:	4607      	mov	r7, r0
 8003ac2:	4688      	mov	r8, r1
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	2600      	movs	r6, #0
 8003ac8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003acc:	f1b9 0901 	subs.w	r9, r9, #1
 8003ad0:	d505      	bpl.n	8003ade <_fwalk_sglue+0x22>
 8003ad2:	6824      	ldr	r4, [r4, #0]
 8003ad4:	2c00      	cmp	r4, #0
 8003ad6:	d1f7      	bne.n	8003ac8 <_fwalk_sglue+0xc>
 8003ad8:	4630      	mov	r0, r6
 8003ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ade:	89ab      	ldrh	r3, [r5, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d907      	bls.n	8003af4 <_fwalk_sglue+0x38>
 8003ae4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	d003      	beq.n	8003af4 <_fwalk_sglue+0x38>
 8003aec:	4629      	mov	r1, r5
 8003aee:	4638      	mov	r0, r7
 8003af0:	47c0      	blx	r8
 8003af2:	4306      	orrs	r6, r0
 8003af4:	3568      	adds	r5, #104	@ 0x68
 8003af6:	e7e9      	b.n	8003acc <_fwalk_sglue+0x10>

08003af8 <iprintf>:
 8003af8:	b40f      	push	{r0, r1, r2, r3}
 8003afa:	b507      	push	{r0, r1, r2, lr}
 8003afc:	4906      	ldr	r1, [pc, #24]	@ (8003b18 <iprintf+0x20>)
 8003afe:	ab04      	add	r3, sp, #16
 8003b00:	6808      	ldr	r0, [r1, #0]
 8003b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b06:	6881      	ldr	r1, [r0, #8]
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	f000 fadb 	bl	80040c4 <_vfiprintf_r>
 8003b0e:	b003      	add	sp, #12
 8003b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b14:	b004      	add	sp, #16
 8003b16:	4770      	bx	lr
 8003b18:	20000018 	.word	0x20000018

08003b1c <_puts_r>:
 8003b1c:	6a03      	ldr	r3, [r0, #32]
 8003b1e:	b570      	push	{r4, r5, r6, lr}
 8003b20:	6884      	ldr	r4, [r0, #8]
 8003b22:	4605      	mov	r5, r0
 8003b24:	460e      	mov	r6, r1
 8003b26:	b90b      	cbnz	r3, 8003b2c <_puts_r+0x10>
 8003b28:	f7ff ffb0 	bl	8003a8c <__sinit>
 8003b2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b2e:	07db      	lsls	r3, r3, #31
 8003b30:	d405      	bmi.n	8003b3e <_puts_r+0x22>
 8003b32:	89a3      	ldrh	r3, [r4, #12]
 8003b34:	0598      	lsls	r0, r3, #22
 8003b36:	d402      	bmi.n	8003b3e <_puts_r+0x22>
 8003b38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b3a:	f000 f99e 	bl	8003e7a <__retarget_lock_acquire_recursive>
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	0719      	lsls	r1, r3, #28
 8003b42:	d502      	bpl.n	8003b4a <_puts_r+0x2e>
 8003b44:	6923      	ldr	r3, [r4, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d135      	bne.n	8003bb6 <_puts_r+0x9a>
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f000 f8c5 	bl	8003cdc <__swsetup_r>
 8003b52:	b380      	cbz	r0, 8003bb6 <_puts_r+0x9a>
 8003b54:	f04f 35ff 	mov.w	r5, #4294967295
 8003b58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b5a:	07da      	lsls	r2, r3, #31
 8003b5c:	d405      	bmi.n	8003b6a <_puts_r+0x4e>
 8003b5e:	89a3      	ldrh	r3, [r4, #12]
 8003b60:	059b      	lsls	r3, r3, #22
 8003b62:	d402      	bmi.n	8003b6a <_puts_r+0x4e>
 8003b64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b66:	f000 f989 	bl	8003e7c <__retarget_lock_release_recursive>
 8003b6a:	4628      	mov	r0, r5
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	da04      	bge.n	8003b7c <_puts_r+0x60>
 8003b72:	69a2      	ldr	r2, [r4, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	dc17      	bgt.n	8003ba8 <_puts_r+0x8c>
 8003b78:	290a      	cmp	r1, #10
 8003b7a:	d015      	beq.n	8003ba8 <_puts_r+0x8c>
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	6022      	str	r2, [r4, #0]
 8003b82:	7019      	strb	r1, [r3, #0]
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	60a3      	str	r3, [r4, #8]
 8003b8e:	2900      	cmp	r1, #0
 8003b90:	d1ed      	bne.n	8003b6e <_puts_r+0x52>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da11      	bge.n	8003bba <_puts_r+0x9e>
 8003b96:	4622      	mov	r2, r4
 8003b98:	210a      	movs	r1, #10
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f000 f85f 	bl	8003c5e <__swbuf_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0d7      	beq.n	8003b54 <_puts_r+0x38>
 8003ba4:	250a      	movs	r5, #10
 8003ba6:	e7d7      	b.n	8003b58 <_puts_r+0x3c>
 8003ba8:	4622      	mov	r2, r4
 8003baa:	4628      	mov	r0, r5
 8003bac:	f000 f857 	bl	8003c5e <__swbuf_r>
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	d1e7      	bne.n	8003b84 <_puts_r+0x68>
 8003bb4:	e7ce      	b.n	8003b54 <_puts_r+0x38>
 8003bb6:	3e01      	subs	r6, #1
 8003bb8:	e7e4      	b.n	8003b84 <_puts_r+0x68>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	6022      	str	r2, [r4, #0]
 8003bc0:	220a      	movs	r2, #10
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e7ee      	b.n	8003ba4 <_puts_r+0x88>
	...

08003bc8 <puts>:
 8003bc8:	4b02      	ldr	r3, [pc, #8]	@ (8003bd4 <puts+0xc>)
 8003bca:	4601      	mov	r1, r0
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	f7ff bfa5 	b.w	8003b1c <_puts_r>
 8003bd2:	bf00      	nop
 8003bd4:	20000018 	.word	0x20000018

08003bd8 <__sread>:
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	460c      	mov	r4, r1
 8003bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be0:	f000 f8fc 	bl	8003ddc <_read_r>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	bfab      	itete	ge
 8003be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003bea:	89a3      	ldrhlt	r3, [r4, #12]
 8003bec:	181b      	addge	r3, r3, r0
 8003bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003bf2:	bfac      	ite	ge
 8003bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003bf6:	81a3      	strhlt	r3, [r4, #12]
 8003bf8:	bd10      	pop	{r4, pc}

08003bfa <__swrite>:
 8003bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfe:	461f      	mov	r7, r3
 8003c00:	898b      	ldrh	r3, [r1, #12]
 8003c02:	05db      	lsls	r3, r3, #23
 8003c04:	4605      	mov	r5, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	4616      	mov	r6, r2
 8003c0a:	d505      	bpl.n	8003c18 <__swrite+0x1e>
 8003c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c10:	2302      	movs	r3, #2
 8003c12:	2200      	movs	r2, #0
 8003c14:	f000 f8d0 	bl	8003db8 <_lseek_r>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c22:	81a3      	strh	r3, [r4, #12]
 8003c24:	4632      	mov	r2, r6
 8003c26:	463b      	mov	r3, r7
 8003c28:	4628      	mov	r0, r5
 8003c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c2e:	f000 b8e7 	b.w	8003e00 <_write_r>

08003c32 <__sseek>:
 8003c32:	b510      	push	{r4, lr}
 8003c34:	460c      	mov	r4, r1
 8003c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3a:	f000 f8bd 	bl	8003db8 <_lseek_r>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	89a3      	ldrh	r3, [r4, #12]
 8003c42:	bf15      	itete	ne
 8003c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003c4e:	81a3      	strheq	r3, [r4, #12]
 8003c50:	bf18      	it	ne
 8003c52:	81a3      	strhne	r3, [r4, #12]
 8003c54:	bd10      	pop	{r4, pc}

08003c56 <__sclose>:
 8003c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c5a:	f000 b89d 	b.w	8003d98 <_close_r>

08003c5e <__swbuf_r>:
 8003c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c60:	460e      	mov	r6, r1
 8003c62:	4614      	mov	r4, r2
 8003c64:	4605      	mov	r5, r0
 8003c66:	b118      	cbz	r0, 8003c70 <__swbuf_r+0x12>
 8003c68:	6a03      	ldr	r3, [r0, #32]
 8003c6a:	b90b      	cbnz	r3, 8003c70 <__swbuf_r+0x12>
 8003c6c:	f7ff ff0e 	bl	8003a8c <__sinit>
 8003c70:	69a3      	ldr	r3, [r4, #24]
 8003c72:	60a3      	str	r3, [r4, #8]
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	071a      	lsls	r2, r3, #28
 8003c78:	d501      	bpl.n	8003c7e <__swbuf_r+0x20>
 8003c7a:	6923      	ldr	r3, [r4, #16]
 8003c7c:	b943      	cbnz	r3, 8003c90 <__swbuf_r+0x32>
 8003c7e:	4621      	mov	r1, r4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f82b 	bl	8003cdc <__swsetup_r>
 8003c86:	b118      	cbz	r0, 8003c90 <__swbuf_r+0x32>
 8003c88:	f04f 37ff 	mov.w	r7, #4294967295
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	6922      	ldr	r2, [r4, #16]
 8003c94:	1a98      	subs	r0, r3, r2
 8003c96:	6963      	ldr	r3, [r4, #20]
 8003c98:	b2f6      	uxtb	r6, r6
 8003c9a:	4283      	cmp	r3, r0
 8003c9c:	4637      	mov	r7, r6
 8003c9e:	dc05      	bgt.n	8003cac <__swbuf_r+0x4e>
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 fd36 	bl	8004714 <_fflush_r>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d1ed      	bne.n	8003c88 <__swbuf_r+0x2a>
 8003cac:	68a3      	ldr	r3, [r4, #8]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	60a3      	str	r3, [r4, #8]
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	6022      	str	r2, [r4, #0]
 8003cb8:	701e      	strb	r6, [r3, #0]
 8003cba:	6962      	ldr	r2, [r4, #20]
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d004      	beq.n	8003ccc <__swbuf_r+0x6e>
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	07db      	lsls	r3, r3, #31
 8003cc6:	d5e1      	bpl.n	8003c8c <__swbuf_r+0x2e>
 8003cc8:	2e0a      	cmp	r6, #10
 8003cca:	d1df      	bne.n	8003c8c <__swbuf_r+0x2e>
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 fd20 	bl	8004714 <_fflush_r>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d0d9      	beq.n	8003c8c <__swbuf_r+0x2e>
 8003cd8:	e7d6      	b.n	8003c88 <__swbuf_r+0x2a>
	...

08003cdc <__swsetup_r>:
 8003cdc:	b538      	push	{r3, r4, r5, lr}
 8003cde:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <__swsetup_r+0xa8>)
 8003ce0:	4605      	mov	r5, r0
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	b118      	cbz	r0, 8003cf0 <__swsetup_r+0x14>
 8003ce8:	6a03      	ldr	r3, [r0, #32]
 8003cea:	b90b      	cbnz	r3, 8003cf0 <__swsetup_r+0x14>
 8003cec:	f7ff fece 	bl	8003a8c <__sinit>
 8003cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf4:	0719      	lsls	r1, r3, #28
 8003cf6:	d422      	bmi.n	8003d3e <__swsetup_r+0x62>
 8003cf8:	06da      	lsls	r2, r3, #27
 8003cfa:	d407      	bmi.n	8003d0c <__swsetup_r+0x30>
 8003cfc:	2209      	movs	r2, #9
 8003cfe:	602a      	str	r2, [r5, #0]
 8003d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0a:	e033      	b.n	8003d74 <__swsetup_r+0x98>
 8003d0c:	0758      	lsls	r0, r3, #29
 8003d0e:	d512      	bpl.n	8003d36 <__swsetup_r+0x5a>
 8003d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d12:	b141      	cbz	r1, 8003d26 <__swsetup_r+0x4a>
 8003d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d18:	4299      	cmp	r1, r3
 8003d1a:	d002      	beq.n	8003d22 <__swsetup_r+0x46>
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	f000 f8af 	bl	8003e80 <_free_r>
 8003d22:	2300      	movs	r3, #0
 8003d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d26:	89a3      	ldrh	r3, [r4, #12]
 8003d28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d2c:	81a3      	strh	r3, [r4, #12]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6063      	str	r3, [r4, #4]
 8003d32:	6923      	ldr	r3, [r4, #16]
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	89a3      	ldrh	r3, [r4, #12]
 8003d38:	f043 0308 	orr.w	r3, r3, #8
 8003d3c:	81a3      	strh	r3, [r4, #12]
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	b94b      	cbnz	r3, 8003d56 <__swsetup_r+0x7a>
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d4c:	d003      	beq.n	8003d56 <__swsetup_r+0x7a>
 8003d4e:	4621      	mov	r1, r4
 8003d50:	4628      	mov	r0, r5
 8003d52:	f000 fd2d 	bl	80047b0 <__smakebuf_r>
 8003d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d5a:	f013 0201 	ands.w	r2, r3, #1
 8003d5e:	d00a      	beq.n	8003d76 <__swsetup_r+0x9a>
 8003d60:	2200      	movs	r2, #0
 8003d62:	60a2      	str	r2, [r4, #8]
 8003d64:	6962      	ldr	r2, [r4, #20]
 8003d66:	4252      	negs	r2, r2
 8003d68:	61a2      	str	r2, [r4, #24]
 8003d6a:	6922      	ldr	r2, [r4, #16]
 8003d6c:	b942      	cbnz	r2, 8003d80 <__swsetup_r+0xa4>
 8003d6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d72:	d1c5      	bne.n	8003d00 <__swsetup_r+0x24>
 8003d74:	bd38      	pop	{r3, r4, r5, pc}
 8003d76:	0799      	lsls	r1, r3, #30
 8003d78:	bf58      	it	pl
 8003d7a:	6962      	ldrpl	r2, [r4, #20]
 8003d7c:	60a2      	str	r2, [r4, #8]
 8003d7e:	e7f4      	b.n	8003d6a <__swsetup_r+0x8e>
 8003d80:	2000      	movs	r0, #0
 8003d82:	e7f7      	b.n	8003d74 <__swsetup_r+0x98>
 8003d84:	20000018 	.word	0x20000018

08003d88 <memset>:
 8003d88:	4402      	add	r2, r0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <memset+0xa>
 8003d90:	4770      	bx	lr
 8003d92:	f803 1b01 	strb.w	r1, [r3], #1
 8003d96:	e7f9      	b.n	8003d8c <memset+0x4>

08003d98 <_close_r>:
 8003d98:	b538      	push	{r3, r4, r5, lr}
 8003d9a:	4d06      	ldr	r5, [pc, #24]	@ (8003db4 <_close_r+0x1c>)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	4604      	mov	r4, r0
 8003da0:	4608      	mov	r0, r1
 8003da2:	602b      	str	r3, [r5, #0]
 8003da4:	f7fc feb8 	bl	8000b18 <_close>
 8003da8:	1c43      	adds	r3, r0, #1
 8003daa:	d102      	bne.n	8003db2 <_close_r+0x1a>
 8003dac:	682b      	ldr	r3, [r5, #0]
 8003dae:	b103      	cbz	r3, 8003db2 <_close_r+0x1a>
 8003db0:	6023      	str	r3, [r4, #0]
 8003db2:	bd38      	pop	{r3, r4, r5, pc}
 8003db4:	20000274 	.word	0x20000274

08003db8 <_lseek_r>:
 8003db8:	b538      	push	{r3, r4, r5, lr}
 8003dba:	4d07      	ldr	r5, [pc, #28]	@ (8003dd8 <_lseek_r+0x20>)
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	4608      	mov	r0, r1
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	602a      	str	r2, [r5, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f7fc fecd 	bl	8000b66 <_lseek>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <_lseek_r+0x1e>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	b103      	cbz	r3, 8003dd6 <_lseek_r+0x1e>
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	bd38      	pop	{r3, r4, r5, pc}
 8003dd8:	20000274 	.word	0x20000274

08003ddc <_read_r>:
 8003ddc:	b538      	push	{r3, r4, r5, lr}
 8003dde:	4d07      	ldr	r5, [pc, #28]	@ (8003dfc <_read_r+0x20>)
 8003de0:	4604      	mov	r4, r0
 8003de2:	4608      	mov	r0, r1
 8003de4:	4611      	mov	r1, r2
 8003de6:	2200      	movs	r2, #0
 8003de8:	602a      	str	r2, [r5, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7fc fe5b 	bl	8000aa6 <_read>
 8003df0:	1c43      	adds	r3, r0, #1
 8003df2:	d102      	bne.n	8003dfa <_read_r+0x1e>
 8003df4:	682b      	ldr	r3, [r5, #0]
 8003df6:	b103      	cbz	r3, 8003dfa <_read_r+0x1e>
 8003df8:	6023      	str	r3, [r4, #0]
 8003dfa:	bd38      	pop	{r3, r4, r5, pc}
 8003dfc:	20000274 	.word	0x20000274

08003e00 <_write_r>:
 8003e00:	b538      	push	{r3, r4, r5, lr}
 8003e02:	4d07      	ldr	r5, [pc, #28]	@ (8003e20 <_write_r+0x20>)
 8003e04:	4604      	mov	r4, r0
 8003e06:	4608      	mov	r0, r1
 8003e08:	4611      	mov	r1, r2
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	602a      	str	r2, [r5, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f7fc fe66 	bl	8000ae0 <_write>
 8003e14:	1c43      	adds	r3, r0, #1
 8003e16:	d102      	bne.n	8003e1e <_write_r+0x1e>
 8003e18:	682b      	ldr	r3, [r5, #0]
 8003e1a:	b103      	cbz	r3, 8003e1e <_write_r+0x1e>
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	bd38      	pop	{r3, r4, r5, pc}
 8003e20:	20000274 	.word	0x20000274

08003e24 <__errno>:
 8003e24:	4b01      	ldr	r3, [pc, #4]	@ (8003e2c <__errno+0x8>)
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	20000018 	.word	0x20000018

08003e30 <__libc_init_array>:
 8003e30:	b570      	push	{r4, r5, r6, lr}
 8003e32:	4d0d      	ldr	r5, [pc, #52]	@ (8003e68 <__libc_init_array+0x38>)
 8003e34:	4c0d      	ldr	r4, [pc, #52]	@ (8003e6c <__libc_init_array+0x3c>)
 8003e36:	1b64      	subs	r4, r4, r5
 8003e38:	10a4      	asrs	r4, r4, #2
 8003e3a:	2600      	movs	r6, #0
 8003e3c:	42a6      	cmp	r6, r4
 8003e3e:	d109      	bne.n	8003e54 <__libc_init_array+0x24>
 8003e40:	4d0b      	ldr	r5, [pc, #44]	@ (8003e70 <__libc_init_array+0x40>)
 8003e42:	4c0c      	ldr	r4, [pc, #48]	@ (8003e74 <__libc_init_array+0x44>)
 8003e44:	f000 fd22 	bl	800488c <_init>
 8003e48:	1b64      	subs	r4, r4, r5
 8003e4a:	10a4      	asrs	r4, r4, #2
 8003e4c:	2600      	movs	r6, #0
 8003e4e:	42a6      	cmp	r6, r4
 8003e50:	d105      	bne.n	8003e5e <__libc_init_array+0x2e>
 8003e52:	bd70      	pop	{r4, r5, r6, pc}
 8003e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e58:	4798      	blx	r3
 8003e5a:	3601      	adds	r6, #1
 8003e5c:	e7ee      	b.n	8003e3c <__libc_init_array+0xc>
 8003e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e62:	4798      	blx	r3
 8003e64:	3601      	adds	r6, #1
 8003e66:	e7f2      	b.n	8003e4e <__libc_init_array+0x1e>
 8003e68:	080049b0 	.word	0x080049b0
 8003e6c:	080049b0 	.word	0x080049b0
 8003e70:	080049b0 	.word	0x080049b0
 8003e74:	080049b4 	.word	0x080049b4

08003e78 <__retarget_lock_init_recursive>:
 8003e78:	4770      	bx	lr

08003e7a <__retarget_lock_acquire_recursive>:
 8003e7a:	4770      	bx	lr

08003e7c <__retarget_lock_release_recursive>:
 8003e7c:	4770      	bx	lr
	...

08003e80 <_free_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	2900      	cmp	r1, #0
 8003e86:	d041      	beq.n	8003f0c <_free_r+0x8c>
 8003e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8c:	1f0c      	subs	r4, r1, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bfb8      	it	lt
 8003e92:	18e4      	addlt	r4, r4, r3
 8003e94:	f000 f8e0 	bl	8004058 <__malloc_lock>
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <_free_r+0x90>)
 8003e9a:	6813      	ldr	r3, [r2, #0]
 8003e9c:	b933      	cbnz	r3, 8003eac <_free_r+0x2c>
 8003e9e:	6063      	str	r3, [r4, #4]
 8003ea0:	6014      	str	r4, [r2, #0]
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea8:	f000 b8dc 	b.w	8004064 <__malloc_unlock>
 8003eac:	42a3      	cmp	r3, r4
 8003eae:	d908      	bls.n	8003ec2 <_free_r+0x42>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	1821      	adds	r1, r4, r0
 8003eb4:	428b      	cmp	r3, r1
 8003eb6:	bf01      	itttt	eq
 8003eb8:	6819      	ldreq	r1, [r3, #0]
 8003eba:	685b      	ldreq	r3, [r3, #4]
 8003ebc:	1809      	addeq	r1, r1, r0
 8003ebe:	6021      	streq	r1, [r4, #0]
 8003ec0:	e7ed      	b.n	8003e9e <_free_r+0x1e>
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b10b      	cbz	r3, 8003ecc <_free_r+0x4c>
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	d9fa      	bls.n	8003ec2 <_free_r+0x42>
 8003ecc:	6811      	ldr	r1, [r2, #0]
 8003ece:	1850      	adds	r0, r2, r1
 8003ed0:	42a0      	cmp	r0, r4
 8003ed2:	d10b      	bne.n	8003eec <_free_r+0x6c>
 8003ed4:	6820      	ldr	r0, [r4, #0]
 8003ed6:	4401      	add	r1, r0
 8003ed8:	1850      	adds	r0, r2, r1
 8003eda:	4283      	cmp	r3, r0
 8003edc:	6011      	str	r1, [r2, #0]
 8003ede:	d1e0      	bne.n	8003ea2 <_free_r+0x22>
 8003ee0:	6818      	ldr	r0, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	6053      	str	r3, [r2, #4]
 8003ee6:	4408      	add	r0, r1
 8003ee8:	6010      	str	r0, [r2, #0]
 8003eea:	e7da      	b.n	8003ea2 <_free_r+0x22>
 8003eec:	d902      	bls.n	8003ef4 <_free_r+0x74>
 8003eee:	230c      	movs	r3, #12
 8003ef0:	602b      	str	r3, [r5, #0]
 8003ef2:	e7d6      	b.n	8003ea2 <_free_r+0x22>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	1821      	adds	r1, r4, r0
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf04      	itt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	6063      	str	r3, [r4, #4]
 8003f02:	bf04      	itt	eq
 8003f04:	1809      	addeq	r1, r1, r0
 8003f06:	6021      	streq	r1, [r4, #0]
 8003f08:	6054      	str	r4, [r2, #4]
 8003f0a:	e7ca      	b.n	8003ea2 <_free_r+0x22>
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000280 	.word	0x20000280

08003f14 <sbrk_aligned>:
 8003f14:	b570      	push	{r4, r5, r6, lr}
 8003f16:	4e0f      	ldr	r6, [pc, #60]	@ (8003f54 <sbrk_aligned+0x40>)
 8003f18:	460c      	mov	r4, r1
 8003f1a:	6831      	ldr	r1, [r6, #0]
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	b911      	cbnz	r1, 8003f26 <sbrk_aligned+0x12>
 8003f20:	f000 fca4 	bl	800486c <_sbrk_r>
 8003f24:	6030      	str	r0, [r6, #0]
 8003f26:	4621      	mov	r1, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 fc9f 	bl	800486c <_sbrk_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	d103      	bne.n	8003f3a <sbrk_aligned+0x26>
 8003f32:	f04f 34ff 	mov.w	r4, #4294967295
 8003f36:	4620      	mov	r0, r4
 8003f38:	bd70      	pop	{r4, r5, r6, pc}
 8003f3a:	1cc4      	adds	r4, r0, #3
 8003f3c:	f024 0403 	bic.w	r4, r4, #3
 8003f40:	42a0      	cmp	r0, r4
 8003f42:	d0f8      	beq.n	8003f36 <sbrk_aligned+0x22>
 8003f44:	1a21      	subs	r1, r4, r0
 8003f46:	4628      	mov	r0, r5
 8003f48:	f000 fc90 	bl	800486c <_sbrk_r>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d1f2      	bne.n	8003f36 <sbrk_aligned+0x22>
 8003f50:	e7ef      	b.n	8003f32 <sbrk_aligned+0x1e>
 8003f52:	bf00      	nop
 8003f54:	2000027c 	.word	0x2000027c

08003f58 <_malloc_r>:
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	1ccd      	adds	r5, r1, #3
 8003f5e:	f025 0503 	bic.w	r5, r5, #3
 8003f62:	3508      	adds	r5, #8
 8003f64:	2d0c      	cmp	r5, #12
 8003f66:	bf38      	it	cc
 8003f68:	250c      	movcc	r5, #12
 8003f6a:	2d00      	cmp	r5, #0
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	db01      	blt.n	8003f74 <_malloc_r+0x1c>
 8003f70:	42a9      	cmp	r1, r5
 8003f72:	d904      	bls.n	8003f7e <_malloc_r+0x26>
 8003f74:	230c      	movs	r3, #12
 8003f76:	6033      	str	r3, [r6, #0]
 8003f78:	2000      	movs	r0, #0
 8003f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004054 <_malloc_r+0xfc>
 8003f82:	f000 f869 	bl	8004058 <__malloc_lock>
 8003f86:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8a:	461c      	mov	r4, r3
 8003f8c:	bb44      	cbnz	r4, 8003fe0 <_malloc_r+0x88>
 8003f8e:	4629      	mov	r1, r5
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7ff ffbf 	bl	8003f14 <sbrk_aligned>
 8003f96:	1c43      	adds	r3, r0, #1
 8003f98:	4604      	mov	r4, r0
 8003f9a:	d158      	bne.n	800404e <_malloc_r+0xf6>
 8003f9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003fa0:	4627      	mov	r7, r4
 8003fa2:	2f00      	cmp	r7, #0
 8003fa4:	d143      	bne.n	800402e <_malloc_r+0xd6>
 8003fa6:	2c00      	cmp	r4, #0
 8003fa8:	d04b      	beq.n	8004042 <_malloc_r+0xea>
 8003faa:	6823      	ldr	r3, [r4, #0]
 8003fac:	4639      	mov	r1, r7
 8003fae:	4630      	mov	r0, r6
 8003fb0:	eb04 0903 	add.w	r9, r4, r3
 8003fb4:	f000 fc5a 	bl	800486c <_sbrk_r>
 8003fb8:	4581      	cmp	r9, r0
 8003fba:	d142      	bne.n	8004042 <_malloc_r+0xea>
 8003fbc:	6821      	ldr	r1, [r4, #0]
 8003fbe:	1a6d      	subs	r5, r5, r1
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f7ff ffa6 	bl	8003f14 <sbrk_aligned>
 8003fc8:	3001      	adds	r0, #1
 8003fca:	d03a      	beq.n	8004042 <_malloc_r+0xea>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	442b      	add	r3, r5
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	bb62      	cbnz	r2, 8004034 <_malloc_r+0xdc>
 8003fda:	f8c8 7000 	str.w	r7, [r8]
 8003fde:	e00f      	b.n	8004000 <_malloc_r+0xa8>
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	1b52      	subs	r2, r2, r5
 8003fe4:	d420      	bmi.n	8004028 <_malloc_r+0xd0>
 8003fe6:	2a0b      	cmp	r2, #11
 8003fe8:	d917      	bls.n	800401a <_malloc_r+0xc2>
 8003fea:	1961      	adds	r1, r4, r5
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	6025      	str	r5, [r4, #0]
 8003ff0:	bf18      	it	ne
 8003ff2:	6059      	strne	r1, [r3, #4]
 8003ff4:	6863      	ldr	r3, [r4, #4]
 8003ff6:	bf08      	it	eq
 8003ff8:	f8c8 1000 	streq.w	r1, [r8]
 8003ffc:	5162      	str	r2, [r4, r5]
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	4630      	mov	r0, r6
 8004002:	f000 f82f 	bl	8004064 <__malloc_unlock>
 8004006:	f104 000b 	add.w	r0, r4, #11
 800400a:	1d23      	adds	r3, r4, #4
 800400c:	f020 0007 	bic.w	r0, r0, #7
 8004010:	1ac2      	subs	r2, r0, r3
 8004012:	bf1c      	itt	ne
 8004014:	1a1b      	subne	r3, r3, r0
 8004016:	50a3      	strne	r3, [r4, r2]
 8004018:	e7af      	b.n	8003f7a <_malloc_r+0x22>
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	42a3      	cmp	r3, r4
 800401e:	bf0c      	ite	eq
 8004020:	f8c8 2000 	streq.w	r2, [r8]
 8004024:	605a      	strne	r2, [r3, #4]
 8004026:	e7eb      	b.n	8004000 <_malloc_r+0xa8>
 8004028:	4623      	mov	r3, r4
 800402a:	6864      	ldr	r4, [r4, #4]
 800402c:	e7ae      	b.n	8003f8c <_malloc_r+0x34>
 800402e:	463c      	mov	r4, r7
 8004030:	687f      	ldr	r7, [r7, #4]
 8004032:	e7b6      	b.n	8003fa2 <_malloc_r+0x4a>
 8004034:	461a      	mov	r2, r3
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	42a3      	cmp	r3, r4
 800403a:	d1fb      	bne.n	8004034 <_malloc_r+0xdc>
 800403c:	2300      	movs	r3, #0
 800403e:	6053      	str	r3, [r2, #4]
 8004040:	e7de      	b.n	8004000 <_malloc_r+0xa8>
 8004042:	230c      	movs	r3, #12
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	4630      	mov	r0, r6
 8004048:	f000 f80c 	bl	8004064 <__malloc_unlock>
 800404c:	e794      	b.n	8003f78 <_malloc_r+0x20>
 800404e:	6005      	str	r5, [r0, #0]
 8004050:	e7d6      	b.n	8004000 <_malloc_r+0xa8>
 8004052:	bf00      	nop
 8004054:	20000280 	.word	0x20000280

08004058 <__malloc_lock>:
 8004058:	4801      	ldr	r0, [pc, #4]	@ (8004060 <__malloc_lock+0x8>)
 800405a:	f7ff bf0e 	b.w	8003e7a <__retarget_lock_acquire_recursive>
 800405e:	bf00      	nop
 8004060:	20000278 	.word	0x20000278

08004064 <__malloc_unlock>:
 8004064:	4801      	ldr	r0, [pc, #4]	@ (800406c <__malloc_unlock+0x8>)
 8004066:	f7ff bf09 	b.w	8003e7c <__retarget_lock_release_recursive>
 800406a:	bf00      	nop
 800406c:	20000278 	.word	0x20000278

08004070 <__sfputc_r>:
 8004070:	6893      	ldr	r3, [r2, #8]
 8004072:	3b01      	subs	r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	b410      	push	{r4}
 8004078:	6093      	str	r3, [r2, #8]
 800407a:	da08      	bge.n	800408e <__sfputc_r+0x1e>
 800407c:	6994      	ldr	r4, [r2, #24]
 800407e:	42a3      	cmp	r3, r4
 8004080:	db01      	blt.n	8004086 <__sfputc_r+0x16>
 8004082:	290a      	cmp	r1, #10
 8004084:	d103      	bne.n	800408e <__sfputc_r+0x1e>
 8004086:	f85d 4b04 	ldr.w	r4, [sp], #4
 800408a:	f7ff bde8 	b.w	8003c5e <__swbuf_r>
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	1c58      	adds	r0, r3, #1
 8004092:	6010      	str	r0, [r2, #0]
 8004094:	7019      	strb	r1, [r3, #0]
 8004096:	4608      	mov	r0, r1
 8004098:	f85d 4b04 	ldr.w	r4, [sp], #4
 800409c:	4770      	bx	lr

0800409e <__sfputs_r>:
 800409e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a0:	4606      	mov	r6, r0
 80040a2:	460f      	mov	r7, r1
 80040a4:	4614      	mov	r4, r2
 80040a6:	18d5      	adds	r5, r2, r3
 80040a8:	42ac      	cmp	r4, r5
 80040aa:	d101      	bne.n	80040b0 <__sfputs_r+0x12>
 80040ac:	2000      	movs	r0, #0
 80040ae:	e007      	b.n	80040c0 <__sfputs_r+0x22>
 80040b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b4:	463a      	mov	r2, r7
 80040b6:	4630      	mov	r0, r6
 80040b8:	f7ff ffda 	bl	8004070 <__sfputc_r>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d1f3      	bne.n	80040a8 <__sfputs_r+0xa>
 80040c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080040c4 <_vfiprintf_r>:
 80040c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c8:	460d      	mov	r5, r1
 80040ca:	b09d      	sub	sp, #116	@ 0x74
 80040cc:	4614      	mov	r4, r2
 80040ce:	4698      	mov	r8, r3
 80040d0:	4606      	mov	r6, r0
 80040d2:	b118      	cbz	r0, 80040dc <_vfiprintf_r+0x18>
 80040d4:	6a03      	ldr	r3, [r0, #32]
 80040d6:	b90b      	cbnz	r3, 80040dc <_vfiprintf_r+0x18>
 80040d8:	f7ff fcd8 	bl	8003a8c <__sinit>
 80040dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040de:	07d9      	lsls	r1, r3, #31
 80040e0:	d405      	bmi.n	80040ee <_vfiprintf_r+0x2a>
 80040e2:	89ab      	ldrh	r3, [r5, #12]
 80040e4:	059a      	lsls	r2, r3, #22
 80040e6:	d402      	bmi.n	80040ee <_vfiprintf_r+0x2a>
 80040e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040ea:	f7ff fec6 	bl	8003e7a <__retarget_lock_acquire_recursive>
 80040ee:	89ab      	ldrh	r3, [r5, #12]
 80040f0:	071b      	lsls	r3, r3, #28
 80040f2:	d501      	bpl.n	80040f8 <_vfiprintf_r+0x34>
 80040f4:	692b      	ldr	r3, [r5, #16]
 80040f6:	b99b      	cbnz	r3, 8004120 <_vfiprintf_r+0x5c>
 80040f8:	4629      	mov	r1, r5
 80040fa:	4630      	mov	r0, r6
 80040fc:	f7ff fdee 	bl	8003cdc <__swsetup_r>
 8004100:	b170      	cbz	r0, 8004120 <_vfiprintf_r+0x5c>
 8004102:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004104:	07dc      	lsls	r4, r3, #31
 8004106:	d504      	bpl.n	8004112 <_vfiprintf_r+0x4e>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	b01d      	add	sp, #116	@ 0x74
 800410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004112:	89ab      	ldrh	r3, [r5, #12]
 8004114:	0598      	lsls	r0, r3, #22
 8004116:	d4f7      	bmi.n	8004108 <_vfiprintf_r+0x44>
 8004118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800411a:	f7ff feaf 	bl	8003e7c <__retarget_lock_release_recursive>
 800411e:	e7f3      	b.n	8004108 <_vfiprintf_r+0x44>
 8004120:	2300      	movs	r3, #0
 8004122:	9309      	str	r3, [sp, #36]	@ 0x24
 8004124:	2320      	movs	r3, #32
 8004126:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800412a:	f8cd 800c 	str.w	r8, [sp, #12]
 800412e:	2330      	movs	r3, #48	@ 0x30
 8004130:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80042e0 <_vfiprintf_r+0x21c>
 8004134:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004138:	f04f 0901 	mov.w	r9, #1
 800413c:	4623      	mov	r3, r4
 800413e:	469a      	mov	sl, r3
 8004140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004144:	b10a      	cbz	r2, 800414a <_vfiprintf_r+0x86>
 8004146:	2a25      	cmp	r2, #37	@ 0x25
 8004148:	d1f9      	bne.n	800413e <_vfiprintf_r+0x7a>
 800414a:	ebba 0b04 	subs.w	fp, sl, r4
 800414e:	d00b      	beq.n	8004168 <_vfiprintf_r+0xa4>
 8004150:	465b      	mov	r3, fp
 8004152:	4622      	mov	r2, r4
 8004154:	4629      	mov	r1, r5
 8004156:	4630      	mov	r0, r6
 8004158:	f7ff ffa1 	bl	800409e <__sfputs_r>
 800415c:	3001      	adds	r0, #1
 800415e:	f000 80a7 	beq.w	80042b0 <_vfiprintf_r+0x1ec>
 8004162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004164:	445a      	add	r2, fp
 8004166:	9209      	str	r2, [sp, #36]	@ 0x24
 8004168:	f89a 3000 	ldrb.w	r3, [sl]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 809f 	beq.w	80042b0 <_vfiprintf_r+0x1ec>
 8004172:	2300      	movs	r3, #0
 8004174:	f04f 32ff 	mov.w	r2, #4294967295
 8004178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800417c:	f10a 0a01 	add.w	sl, sl, #1
 8004180:	9304      	str	r3, [sp, #16]
 8004182:	9307      	str	r3, [sp, #28]
 8004184:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004188:	931a      	str	r3, [sp, #104]	@ 0x68
 800418a:	4654      	mov	r4, sl
 800418c:	2205      	movs	r2, #5
 800418e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004192:	4853      	ldr	r0, [pc, #332]	@ (80042e0 <_vfiprintf_r+0x21c>)
 8004194:	f7fc f81c 	bl	80001d0 <memchr>
 8004198:	9a04      	ldr	r2, [sp, #16]
 800419a:	b9d8      	cbnz	r0, 80041d4 <_vfiprintf_r+0x110>
 800419c:	06d1      	lsls	r1, r2, #27
 800419e:	bf44      	itt	mi
 80041a0:	2320      	movmi	r3, #32
 80041a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041a6:	0713      	lsls	r3, r2, #28
 80041a8:	bf44      	itt	mi
 80041aa:	232b      	movmi	r3, #43	@ 0x2b
 80041ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041b0:	f89a 3000 	ldrb.w	r3, [sl]
 80041b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80041b6:	d015      	beq.n	80041e4 <_vfiprintf_r+0x120>
 80041b8:	9a07      	ldr	r2, [sp, #28]
 80041ba:	4654      	mov	r4, sl
 80041bc:	2000      	movs	r0, #0
 80041be:	f04f 0c0a 	mov.w	ip, #10
 80041c2:	4621      	mov	r1, r4
 80041c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041c8:	3b30      	subs	r3, #48	@ 0x30
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	d94b      	bls.n	8004266 <_vfiprintf_r+0x1a2>
 80041ce:	b1b0      	cbz	r0, 80041fe <_vfiprintf_r+0x13a>
 80041d0:	9207      	str	r2, [sp, #28]
 80041d2:	e014      	b.n	80041fe <_vfiprintf_r+0x13a>
 80041d4:	eba0 0308 	sub.w	r3, r0, r8
 80041d8:	fa09 f303 	lsl.w	r3, r9, r3
 80041dc:	4313      	orrs	r3, r2
 80041de:	9304      	str	r3, [sp, #16]
 80041e0:	46a2      	mov	sl, r4
 80041e2:	e7d2      	b.n	800418a <_vfiprintf_r+0xc6>
 80041e4:	9b03      	ldr	r3, [sp, #12]
 80041e6:	1d19      	adds	r1, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	9103      	str	r1, [sp, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	bfbb      	ittet	lt
 80041f0:	425b      	neglt	r3, r3
 80041f2:	f042 0202 	orrlt.w	r2, r2, #2
 80041f6:	9307      	strge	r3, [sp, #28]
 80041f8:	9307      	strlt	r3, [sp, #28]
 80041fa:	bfb8      	it	lt
 80041fc:	9204      	strlt	r2, [sp, #16]
 80041fe:	7823      	ldrb	r3, [r4, #0]
 8004200:	2b2e      	cmp	r3, #46	@ 0x2e
 8004202:	d10a      	bne.n	800421a <_vfiprintf_r+0x156>
 8004204:	7863      	ldrb	r3, [r4, #1]
 8004206:	2b2a      	cmp	r3, #42	@ 0x2a
 8004208:	d132      	bne.n	8004270 <_vfiprintf_r+0x1ac>
 800420a:	9b03      	ldr	r3, [sp, #12]
 800420c:	1d1a      	adds	r2, r3, #4
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	9203      	str	r2, [sp, #12]
 8004212:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004216:	3402      	adds	r4, #2
 8004218:	9305      	str	r3, [sp, #20]
 800421a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80042f0 <_vfiprintf_r+0x22c>
 800421e:	7821      	ldrb	r1, [r4, #0]
 8004220:	2203      	movs	r2, #3
 8004222:	4650      	mov	r0, sl
 8004224:	f7fb ffd4 	bl	80001d0 <memchr>
 8004228:	b138      	cbz	r0, 800423a <_vfiprintf_r+0x176>
 800422a:	9b04      	ldr	r3, [sp, #16]
 800422c:	eba0 000a 	sub.w	r0, r0, sl
 8004230:	2240      	movs	r2, #64	@ 0x40
 8004232:	4082      	lsls	r2, r0
 8004234:	4313      	orrs	r3, r2
 8004236:	3401      	adds	r4, #1
 8004238:	9304      	str	r3, [sp, #16]
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	4829      	ldr	r0, [pc, #164]	@ (80042e4 <_vfiprintf_r+0x220>)
 8004240:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004244:	2206      	movs	r2, #6
 8004246:	f7fb ffc3 	bl	80001d0 <memchr>
 800424a:	2800      	cmp	r0, #0
 800424c:	d03f      	beq.n	80042ce <_vfiprintf_r+0x20a>
 800424e:	4b26      	ldr	r3, [pc, #152]	@ (80042e8 <_vfiprintf_r+0x224>)
 8004250:	bb1b      	cbnz	r3, 800429a <_vfiprintf_r+0x1d6>
 8004252:	9b03      	ldr	r3, [sp, #12]
 8004254:	3307      	adds	r3, #7
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	3308      	adds	r3, #8
 800425c:	9303      	str	r3, [sp, #12]
 800425e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004260:	443b      	add	r3, r7
 8004262:	9309      	str	r3, [sp, #36]	@ 0x24
 8004264:	e76a      	b.n	800413c <_vfiprintf_r+0x78>
 8004266:	fb0c 3202 	mla	r2, ip, r2, r3
 800426a:	460c      	mov	r4, r1
 800426c:	2001      	movs	r0, #1
 800426e:	e7a8      	b.n	80041c2 <_vfiprintf_r+0xfe>
 8004270:	2300      	movs	r3, #0
 8004272:	3401      	adds	r4, #1
 8004274:	9305      	str	r3, [sp, #20]
 8004276:	4619      	mov	r1, r3
 8004278:	f04f 0c0a 	mov.w	ip, #10
 800427c:	4620      	mov	r0, r4
 800427e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004282:	3a30      	subs	r2, #48	@ 0x30
 8004284:	2a09      	cmp	r2, #9
 8004286:	d903      	bls.n	8004290 <_vfiprintf_r+0x1cc>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0c6      	beq.n	800421a <_vfiprintf_r+0x156>
 800428c:	9105      	str	r1, [sp, #20]
 800428e:	e7c4      	b.n	800421a <_vfiprintf_r+0x156>
 8004290:	fb0c 2101 	mla	r1, ip, r1, r2
 8004294:	4604      	mov	r4, r0
 8004296:	2301      	movs	r3, #1
 8004298:	e7f0      	b.n	800427c <_vfiprintf_r+0x1b8>
 800429a:	ab03      	add	r3, sp, #12
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	462a      	mov	r2, r5
 80042a0:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <_vfiprintf_r+0x228>)
 80042a2:	a904      	add	r1, sp, #16
 80042a4:	4630      	mov	r0, r6
 80042a6:	f3af 8000 	nop.w
 80042aa:	4607      	mov	r7, r0
 80042ac:	1c78      	adds	r0, r7, #1
 80042ae:	d1d6      	bne.n	800425e <_vfiprintf_r+0x19a>
 80042b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042b2:	07d9      	lsls	r1, r3, #31
 80042b4:	d405      	bmi.n	80042c2 <_vfiprintf_r+0x1fe>
 80042b6:	89ab      	ldrh	r3, [r5, #12]
 80042b8:	059a      	lsls	r2, r3, #22
 80042ba:	d402      	bmi.n	80042c2 <_vfiprintf_r+0x1fe>
 80042bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042be:	f7ff fddd 	bl	8003e7c <__retarget_lock_release_recursive>
 80042c2:	89ab      	ldrh	r3, [r5, #12]
 80042c4:	065b      	lsls	r3, r3, #25
 80042c6:	f53f af1f 	bmi.w	8004108 <_vfiprintf_r+0x44>
 80042ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042cc:	e71e      	b.n	800410c <_vfiprintf_r+0x48>
 80042ce:	ab03      	add	r3, sp, #12
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	462a      	mov	r2, r5
 80042d4:	4b05      	ldr	r3, [pc, #20]	@ (80042ec <_vfiprintf_r+0x228>)
 80042d6:	a904      	add	r1, sp, #16
 80042d8:	4630      	mov	r0, r6
 80042da:	f000 f879 	bl	80043d0 <_printf_i>
 80042de:	e7e4      	b.n	80042aa <_vfiprintf_r+0x1e6>
 80042e0:	08004974 	.word	0x08004974
 80042e4:	0800497e 	.word	0x0800497e
 80042e8:	00000000 	.word	0x00000000
 80042ec:	0800409f 	.word	0x0800409f
 80042f0:	0800497a 	.word	0x0800497a

080042f4 <_printf_common>:
 80042f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f8:	4616      	mov	r6, r2
 80042fa:	4698      	mov	r8, r3
 80042fc:	688a      	ldr	r2, [r1, #8]
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004304:	4293      	cmp	r3, r2
 8004306:	bfb8      	it	lt
 8004308:	4613      	movlt	r3, r2
 800430a:	6033      	str	r3, [r6, #0]
 800430c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004310:	4607      	mov	r7, r0
 8004312:	460c      	mov	r4, r1
 8004314:	b10a      	cbz	r2, 800431a <_printf_common+0x26>
 8004316:	3301      	adds	r3, #1
 8004318:	6033      	str	r3, [r6, #0]
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	0699      	lsls	r1, r3, #26
 800431e:	bf42      	ittt	mi
 8004320:	6833      	ldrmi	r3, [r6, #0]
 8004322:	3302      	addmi	r3, #2
 8004324:	6033      	strmi	r3, [r6, #0]
 8004326:	6825      	ldr	r5, [r4, #0]
 8004328:	f015 0506 	ands.w	r5, r5, #6
 800432c:	d106      	bne.n	800433c <_printf_common+0x48>
 800432e:	f104 0a19 	add.w	sl, r4, #25
 8004332:	68e3      	ldr	r3, [r4, #12]
 8004334:	6832      	ldr	r2, [r6, #0]
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	42ab      	cmp	r3, r5
 800433a:	dc26      	bgt.n	800438a <_printf_common+0x96>
 800433c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	3b00      	subs	r3, #0
 8004344:	bf18      	it	ne
 8004346:	2301      	movne	r3, #1
 8004348:	0692      	lsls	r2, r2, #26
 800434a:	d42b      	bmi.n	80043a4 <_printf_common+0xb0>
 800434c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004350:	4641      	mov	r1, r8
 8004352:	4638      	mov	r0, r7
 8004354:	47c8      	blx	r9
 8004356:	3001      	adds	r0, #1
 8004358:	d01e      	beq.n	8004398 <_printf_common+0xa4>
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	6922      	ldr	r2, [r4, #16]
 800435e:	f003 0306 	and.w	r3, r3, #6
 8004362:	2b04      	cmp	r3, #4
 8004364:	bf02      	ittt	eq
 8004366:	68e5      	ldreq	r5, [r4, #12]
 8004368:	6833      	ldreq	r3, [r6, #0]
 800436a:	1aed      	subeq	r5, r5, r3
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	bf0c      	ite	eq
 8004370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004374:	2500      	movne	r5, #0
 8004376:	4293      	cmp	r3, r2
 8004378:	bfc4      	itt	gt
 800437a:	1a9b      	subgt	r3, r3, r2
 800437c:	18ed      	addgt	r5, r5, r3
 800437e:	2600      	movs	r6, #0
 8004380:	341a      	adds	r4, #26
 8004382:	42b5      	cmp	r5, r6
 8004384:	d11a      	bne.n	80043bc <_printf_common+0xc8>
 8004386:	2000      	movs	r0, #0
 8004388:	e008      	b.n	800439c <_printf_common+0xa8>
 800438a:	2301      	movs	r3, #1
 800438c:	4652      	mov	r2, sl
 800438e:	4641      	mov	r1, r8
 8004390:	4638      	mov	r0, r7
 8004392:	47c8      	blx	r9
 8004394:	3001      	adds	r0, #1
 8004396:	d103      	bne.n	80043a0 <_printf_common+0xac>
 8004398:	f04f 30ff 	mov.w	r0, #4294967295
 800439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a0:	3501      	adds	r5, #1
 80043a2:	e7c6      	b.n	8004332 <_printf_common+0x3e>
 80043a4:	18e1      	adds	r1, r4, r3
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	2030      	movs	r0, #48	@ 0x30
 80043aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043ae:	4422      	add	r2, r4
 80043b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043b8:	3302      	adds	r3, #2
 80043ba:	e7c7      	b.n	800434c <_printf_common+0x58>
 80043bc:	2301      	movs	r3, #1
 80043be:	4622      	mov	r2, r4
 80043c0:	4641      	mov	r1, r8
 80043c2:	4638      	mov	r0, r7
 80043c4:	47c8      	blx	r9
 80043c6:	3001      	adds	r0, #1
 80043c8:	d0e6      	beq.n	8004398 <_printf_common+0xa4>
 80043ca:	3601      	adds	r6, #1
 80043cc:	e7d9      	b.n	8004382 <_printf_common+0x8e>
	...

080043d0 <_printf_i>:
 80043d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d4:	7e0f      	ldrb	r7, [r1, #24]
 80043d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80043d8:	2f78      	cmp	r7, #120	@ 0x78
 80043da:	4691      	mov	r9, r2
 80043dc:	4680      	mov	r8, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	469a      	mov	sl, r3
 80043e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80043e6:	d807      	bhi.n	80043f8 <_printf_i+0x28>
 80043e8:	2f62      	cmp	r7, #98	@ 0x62
 80043ea:	d80a      	bhi.n	8004402 <_printf_i+0x32>
 80043ec:	2f00      	cmp	r7, #0
 80043ee:	f000 80d1 	beq.w	8004594 <_printf_i+0x1c4>
 80043f2:	2f58      	cmp	r7, #88	@ 0x58
 80043f4:	f000 80b8 	beq.w	8004568 <_printf_i+0x198>
 80043f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004400:	e03a      	b.n	8004478 <_printf_i+0xa8>
 8004402:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004406:	2b15      	cmp	r3, #21
 8004408:	d8f6      	bhi.n	80043f8 <_printf_i+0x28>
 800440a:	a101      	add	r1, pc, #4	@ (adr r1, 8004410 <_printf_i+0x40>)
 800440c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004410:	08004469 	.word	0x08004469
 8004414:	0800447d 	.word	0x0800447d
 8004418:	080043f9 	.word	0x080043f9
 800441c:	080043f9 	.word	0x080043f9
 8004420:	080043f9 	.word	0x080043f9
 8004424:	080043f9 	.word	0x080043f9
 8004428:	0800447d 	.word	0x0800447d
 800442c:	080043f9 	.word	0x080043f9
 8004430:	080043f9 	.word	0x080043f9
 8004434:	080043f9 	.word	0x080043f9
 8004438:	080043f9 	.word	0x080043f9
 800443c:	0800457b 	.word	0x0800457b
 8004440:	080044a7 	.word	0x080044a7
 8004444:	08004535 	.word	0x08004535
 8004448:	080043f9 	.word	0x080043f9
 800444c:	080043f9 	.word	0x080043f9
 8004450:	0800459d 	.word	0x0800459d
 8004454:	080043f9 	.word	0x080043f9
 8004458:	080044a7 	.word	0x080044a7
 800445c:	080043f9 	.word	0x080043f9
 8004460:	080043f9 	.word	0x080043f9
 8004464:	0800453d 	.word	0x0800453d
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6032      	str	r2, [r6, #0]
 8004470:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004474:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004478:	2301      	movs	r3, #1
 800447a:	e09c      	b.n	80045b6 <_printf_i+0x1e6>
 800447c:	6833      	ldr	r3, [r6, #0]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	6031      	str	r1, [r6, #0]
 8004484:	0606      	lsls	r6, r0, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0xbc>
 8004488:	681d      	ldr	r5, [r3, #0]
 800448a:	e003      	b.n	8004494 <_printf_i+0xc4>
 800448c:	0645      	lsls	r5, r0, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0xb8>
 8004490:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004494:	2d00      	cmp	r5, #0
 8004496:	da03      	bge.n	80044a0 <_printf_i+0xd0>
 8004498:	232d      	movs	r3, #45	@ 0x2d
 800449a:	426d      	negs	r5, r5
 800449c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044a0:	4858      	ldr	r0, [pc, #352]	@ (8004604 <_printf_i+0x234>)
 80044a2:	230a      	movs	r3, #10
 80044a4:	e011      	b.n	80044ca <_printf_i+0xfa>
 80044a6:	6821      	ldr	r1, [r4, #0]
 80044a8:	6833      	ldr	r3, [r6, #0]
 80044aa:	0608      	lsls	r0, r1, #24
 80044ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80044b0:	d402      	bmi.n	80044b8 <_printf_i+0xe8>
 80044b2:	0649      	lsls	r1, r1, #25
 80044b4:	bf48      	it	mi
 80044b6:	b2ad      	uxthmi	r5, r5
 80044b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ba:	4852      	ldr	r0, [pc, #328]	@ (8004604 <_printf_i+0x234>)
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	bf14      	ite	ne
 80044c0:	230a      	movne	r3, #10
 80044c2:	2308      	moveq	r3, #8
 80044c4:	2100      	movs	r1, #0
 80044c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044ca:	6866      	ldr	r6, [r4, #4]
 80044cc:	60a6      	str	r6, [r4, #8]
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	db05      	blt.n	80044de <_printf_i+0x10e>
 80044d2:	6821      	ldr	r1, [r4, #0]
 80044d4:	432e      	orrs	r6, r5
 80044d6:	f021 0104 	bic.w	r1, r1, #4
 80044da:	6021      	str	r1, [r4, #0]
 80044dc:	d04b      	beq.n	8004576 <_printf_i+0x1a6>
 80044de:	4616      	mov	r6, r2
 80044e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80044e4:	fb03 5711 	mls	r7, r3, r1, r5
 80044e8:	5dc7      	ldrb	r7, [r0, r7]
 80044ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80044ee:	462f      	mov	r7, r5
 80044f0:	42bb      	cmp	r3, r7
 80044f2:	460d      	mov	r5, r1
 80044f4:	d9f4      	bls.n	80044e0 <_printf_i+0x110>
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d10b      	bne.n	8004512 <_printf_i+0x142>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	07df      	lsls	r7, r3, #31
 80044fe:	d508      	bpl.n	8004512 <_printf_i+0x142>
 8004500:	6923      	ldr	r3, [r4, #16]
 8004502:	6861      	ldr	r1, [r4, #4]
 8004504:	4299      	cmp	r1, r3
 8004506:	bfde      	ittt	le
 8004508:	2330      	movle	r3, #48	@ 0x30
 800450a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800450e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004512:	1b92      	subs	r2, r2, r6
 8004514:	6122      	str	r2, [r4, #16]
 8004516:	f8cd a000 	str.w	sl, [sp]
 800451a:	464b      	mov	r3, r9
 800451c:	aa03      	add	r2, sp, #12
 800451e:	4621      	mov	r1, r4
 8004520:	4640      	mov	r0, r8
 8004522:	f7ff fee7 	bl	80042f4 <_printf_common>
 8004526:	3001      	adds	r0, #1
 8004528:	d14a      	bne.n	80045c0 <_printf_i+0x1f0>
 800452a:	f04f 30ff 	mov.w	r0, #4294967295
 800452e:	b004      	add	sp, #16
 8004530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	f043 0320 	orr.w	r3, r3, #32
 800453a:	6023      	str	r3, [r4, #0]
 800453c:	4832      	ldr	r0, [pc, #200]	@ (8004608 <_printf_i+0x238>)
 800453e:	2778      	movs	r7, #120	@ 0x78
 8004540:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	6831      	ldr	r1, [r6, #0]
 8004548:	061f      	lsls	r7, r3, #24
 800454a:	f851 5b04 	ldr.w	r5, [r1], #4
 800454e:	d402      	bmi.n	8004556 <_printf_i+0x186>
 8004550:	065f      	lsls	r7, r3, #25
 8004552:	bf48      	it	mi
 8004554:	b2ad      	uxthmi	r5, r5
 8004556:	6031      	str	r1, [r6, #0]
 8004558:	07d9      	lsls	r1, r3, #31
 800455a:	bf44      	itt	mi
 800455c:	f043 0320 	orrmi.w	r3, r3, #32
 8004560:	6023      	strmi	r3, [r4, #0]
 8004562:	b11d      	cbz	r5, 800456c <_printf_i+0x19c>
 8004564:	2310      	movs	r3, #16
 8004566:	e7ad      	b.n	80044c4 <_printf_i+0xf4>
 8004568:	4826      	ldr	r0, [pc, #152]	@ (8004604 <_printf_i+0x234>)
 800456a:	e7e9      	b.n	8004540 <_printf_i+0x170>
 800456c:	6823      	ldr	r3, [r4, #0]
 800456e:	f023 0320 	bic.w	r3, r3, #32
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	e7f6      	b.n	8004564 <_printf_i+0x194>
 8004576:	4616      	mov	r6, r2
 8004578:	e7bd      	b.n	80044f6 <_printf_i+0x126>
 800457a:	6833      	ldr	r3, [r6, #0]
 800457c:	6825      	ldr	r5, [r4, #0]
 800457e:	6961      	ldr	r1, [r4, #20]
 8004580:	1d18      	adds	r0, r3, #4
 8004582:	6030      	str	r0, [r6, #0]
 8004584:	062e      	lsls	r6, r5, #24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	d501      	bpl.n	800458e <_printf_i+0x1be>
 800458a:	6019      	str	r1, [r3, #0]
 800458c:	e002      	b.n	8004594 <_printf_i+0x1c4>
 800458e:	0668      	lsls	r0, r5, #25
 8004590:	d5fb      	bpl.n	800458a <_printf_i+0x1ba>
 8004592:	8019      	strh	r1, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	4616      	mov	r6, r2
 800459a:	e7bc      	b.n	8004516 <_printf_i+0x146>
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	1d1a      	adds	r2, r3, #4
 80045a0:	6032      	str	r2, [r6, #0]
 80045a2:	681e      	ldr	r6, [r3, #0]
 80045a4:	6862      	ldr	r2, [r4, #4]
 80045a6:	2100      	movs	r1, #0
 80045a8:	4630      	mov	r0, r6
 80045aa:	f7fb fe11 	bl	80001d0 <memchr>
 80045ae:	b108      	cbz	r0, 80045b4 <_printf_i+0x1e4>
 80045b0:	1b80      	subs	r0, r0, r6
 80045b2:	6060      	str	r0, [r4, #4]
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045be:	e7aa      	b.n	8004516 <_printf_i+0x146>
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	4632      	mov	r2, r6
 80045c4:	4649      	mov	r1, r9
 80045c6:	4640      	mov	r0, r8
 80045c8:	47d0      	blx	sl
 80045ca:	3001      	adds	r0, #1
 80045cc:	d0ad      	beq.n	800452a <_printf_i+0x15a>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	079b      	lsls	r3, r3, #30
 80045d2:	d413      	bmi.n	80045fc <_printf_i+0x22c>
 80045d4:	68e0      	ldr	r0, [r4, #12]
 80045d6:	9b03      	ldr	r3, [sp, #12]
 80045d8:	4298      	cmp	r0, r3
 80045da:	bfb8      	it	lt
 80045dc:	4618      	movlt	r0, r3
 80045de:	e7a6      	b.n	800452e <_printf_i+0x15e>
 80045e0:	2301      	movs	r3, #1
 80045e2:	4632      	mov	r2, r6
 80045e4:	4649      	mov	r1, r9
 80045e6:	4640      	mov	r0, r8
 80045e8:	47d0      	blx	sl
 80045ea:	3001      	adds	r0, #1
 80045ec:	d09d      	beq.n	800452a <_printf_i+0x15a>
 80045ee:	3501      	adds	r5, #1
 80045f0:	68e3      	ldr	r3, [r4, #12]
 80045f2:	9903      	ldr	r1, [sp, #12]
 80045f4:	1a5b      	subs	r3, r3, r1
 80045f6:	42ab      	cmp	r3, r5
 80045f8:	dcf2      	bgt.n	80045e0 <_printf_i+0x210>
 80045fa:	e7eb      	b.n	80045d4 <_printf_i+0x204>
 80045fc:	2500      	movs	r5, #0
 80045fe:	f104 0619 	add.w	r6, r4, #25
 8004602:	e7f5      	b.n	80045f0 <_printf_i+0x220>
 8004604:	08004985 	.word	0x08004985
 8004608:	08004996 	.word	0x08004996

0800460c <__sflush_r>:
 800460c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004614:	0716      	lsls	r6, r2, #28
 8004616:	4605      	mov	r5, r0
 8004618:	460c      	mov	r4, r1
 800461a:	d454      	bmi.n	80046c6 <__sflush_r+0xba>
 800461c:	684b      	ldr	r3, [r1, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	dc02      	bgt.n	8004628 <__sflush_r+0x1c>
 8004622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	dd48      	ble.n	80046ba <__sflush_r+0xae>
 8004628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800462a:	2e00      	cmp	r6, #0
 800462c:	d045      	beq.n	80046ba <__sflush_r+0xae>
 800462e:	2300      	movs	r3, #0
 8004630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004634:	682f      	ldr	r7, [r5, #0]
 8004636:	6a21      	ldr	r1, [r4, #32]
 8004638:	602b      	str	r3, [r5, #0]
 800463a:	d030      	beq.n	800469e <__sflush_r+0x92>
 800463c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800463e:	89a3      	ldrh	r3, [r4, #12]
 8004640:	0759      	lsls	r1, r3, #29
 8004642:	d505      	bpl.n	8004650 <__sflush_r+0x44>
 8004644:	6863      	ldr	r3, [r4, #4]
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800464a:	b10b      	cbz	r3, 8004650 <__sflush_r+0x44>
 800464c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	2300      	movs	r3, #0
 8004652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004654:	6a21      	ldr	r1, [r4, #32]
 8004656:	4628      	mov	r0, r5
 8004658:	47b0      	blx	r6
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	89a3      	ldrh	r3, [r4, #12]
 800465e:	d106      	bne.n	800466e <__sflush_r+0x62>
 8004660:	6829      	ldr	r1, [r5, #0]
 8004662:	291d      	cmp	r1, #29
 8004664:	d82b      	bhi.n	80046be <__sflush_r+0xb2>
 8004666:	4a2a      	ldr	r2, [pc, #168]	@ (8004710 <__sflush_r+0x104>)
 8004668:	40ca      	lsrs	r2, r1
 800466a:	07d6      	lsls	r6, r2, #31
 800466c:	d527      	bpl.n	80046be <__sflush_r+0xb2>
 800466e:	2200      	movs	r2, #0
 8004670:	6062      	str	r2, [r4, #4]
 8004672:	04d9      	lsls	r1, r3, #19
 8004674:	6922      	ldr	r2, [r4, #16]
 8004676:	6022      	str	r2, [r4, #0]
 8004678:	d504      	bpl.n	8004684 <__sflush_r+0x78>
 800467a:	1c42      	adds	r2, r0, #1
 800467c:	d101      	bne.n	8004682 <__sflush_r+0x76>
 800467e:	682b      	ldr	r3, [r5, #0]
 8004680:	b903      	cbnz	r3, 8004684 <__sflush_r+0x78>
 8004682:	6560      	str	r0, [r4, #84]	@ 0x54
 8004684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004686:	602f      	str	r7, [r5, #0]
 8004688:	b1b9      	cbz	r1, 80046ba <__sflush_r+0xae>
 800468a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800468e:	4299      	cmp	r1, r3
 8004690:	d002      	beq.n	8004698 <__sflush_r+0x8c>
 8004692:	4628      	mov	r0, r5
 8004694:	f7ff fbf4 	bl	8003e80 <_free_r>
 8004698:	2300      	movs	r3, #0
 800469a:	6363      	str	r3, [r4, #52]	@ 0x34
 800469c:	e00d      	b.n	80046ba <__sflush_r+0xae>
 800469e:	2301      	movs	r3, #1
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b0      	blx	r6
 80046a4:	4602      	mov	r2, r0
 80046a6:	1c50      	adds	r0, r2, #1
 80046a8:	d1c9      	bne.n	800463e <__sflush_r+0x32>
 80046aa:	682b      	ldr	r3, [r5, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0c6      	beq.n	800463e <__sflush_r+0x32>
 80046b0:	2b1d      	cmp	r3, #29
 80046b2:	d001      	beq.n	80046b8 <__sflush_r+0xac>
 80046b4:	2b16      	cmp	r3, #22
 80046b6:	d11e      	bne.n	80046f6 <__sflush_r+0xea>
 80046b8:	602f      	str	r7, [r5, #0]
 80046ba:	2000      	movs	r0, #0
 80046bc:	e022      	b.n	8004704 <__sflush_r+0xf8>
 80046be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c2:	b21b      	sxth	r3, r3
 80046c4:	e01b      	b.n	80046fe <__sflush_r+0xf2>
 80046c6:	690f      	ldr	r7, [r1, #16]
 80046c8:	2f00      	cmp	r7, #0
 80046ca:	d0f6      	beq.n	80046ba <__sflush_r+0xae>
 80046cc:	0793      	lsls	r3, r2, #30
 80046ce:	680e      	ldr	r6, [r1, #0]
 80046d0:	bf08      	it	eq
 80046d2:	694b      	ldreq	r3, [r1, #20]
 80046d4:	600f      	str	r7, [r1, #0]
 80046d6:	bf18      	it	ne
 80046d8:	2300      	movne	r3, #0
 80046da:	eba6 0807 	sub.w	r8, r6, r7
 80046de:	608b      	str	r3, [r1, #8]
 80046e0:	f1b8 0f00 	cmp.w	r8, #0
 80046e4:	dde9      	ble.n	80046ba <__sflush_r+0xae>
 80046e6:	6a21      	ldr	r1, [r4, #32]
 80046e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80046ea:	4643      	mov	r3, r8
 80046ec:	463a      	mov	r2, r7
 80046ee:	4628      	mov	r0, r5
 80046f0:	47b0      	blx	r6
 80046f2:	2800      	cmp	r0, #0
 80046f4:	dc08      	bgt.n	8004708 <__sflush_r+0xfc>
 80046f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046fe:	81a3      	strh	r3, [r4, #12]
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004708:	4407      	add	r7, r0
 800470a:	eba8 0800 	sub.w	r8, r8, r0
 800470e:	e7e7      	b.n	80046e0 <__sflush_r+0xd4>
 8004710:	20400001 	.word	0x20400001

08004714 <_fflush_r>:
 8004714:	b538      	push	{r3, r4, r5, lr}
 8004716:	690b      	ldr	r3, [r1, #16]
 8004718:	4605      	mov	r5, r0
 800471a:	460c      	mov	r4, r1
 800471c:	b913      	cbnz	r3, 8004724 <_fflush_r+0x10>
 800471e:	2500      	movs	r5, #0
 8004720:	4628      	mov	r0, r5
 8004722:	bd38      	pop	{r3, r4, r5, pc}
 8004724:	b118      	cbz	r0, 800472e <_fflush_r+0x1a>
 8004726:	6a03      	ldr	r3, [r0, #32]
 8004728:	b90b      	cbnz	r3, 800472e <_fflush_r+0x1a>
 800472a:	f7ff f9af 	bl	8003a8c <__sinit>
 800472e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f3      	beq.n	800471e <_fflush_r+0xa>
 8004736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004738:	07d0      	lsls	r0, r2, #31
 800473a:	d404      	bmi.n	8004746 <_fflush_r+0x32>
 800473c:	0599      	lsls	r1, r3, #22
 800473e:	d402      	bmi.n	8004746 <_fflush_r+0x32>
 8004740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004742:	f7ff fb9a 	bl	8003e7a <__retarget_lock_acquire_recursive>
 8004746:	4628      	mov	r0, r5
 8004748:	4621      	mov	r1, r4
 800474a:	f7ff ff5f 	bl	800460c <__sflush_r>
 800474e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004750:	07da      	lsls	r2, r3, #31
 8004752:	4605      	mov	r5, r0
 8004754:	d4e4      	bmi.n	8004720 <_fflush_r+0xc>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	059b      	lsls	r3, r3, #22
 800475a:	d4e1      	bmi.n	8004720 <_fflush_r+0xc>
 800475c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800475e:	f7ff fb8d 	bl	8003e7c <__retarget_lock_release_recursive>
 8004762:	e7dd      	b.n	8004720 <_fflush_r+0xc>

08004764 <__swhatbuf_r>:
 8004764:	b570      	push	{r4, r5, r6, lr}
 8004766:	460c      	mov	r4, r1
 8004768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476c:	2900      	cmp	r1, #0
 800476e:	b096      	sub	sp, #88	@ 0x58
 8004770:	4615      	mov	r5, r2
 8004772:	461e      	mov	r6, r3
 8004774:	da0d      	bge.n	8004792 <__swhatbuf_r+0x2e>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	bf14      	ite	ne
 8004782:	2340      	movne	r3, #64	@ 0x40
 8004784:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004788:	2000      	movs	r0, #0
 800478a:	6031      	str	r1, [r6, #0]
 800478c:	602b      	str	r3, [r5, #0]
 800478e:	b016      	add	sp, #88	@ 0x58
 8004790:	bd70      	pop	{r4, r5, r6, pc}
 8004792:	466a      	mov	r2, sp
 8004794:	f000 f848 	bl	8004828 <_fstat_r>
 8004798:	2800      	cmp	r0, #0
 800479a:	dbec      	blt.n	8004776 <__swhatbuf_r+0x12>
 800479c:	9901      	ldr	r1, [sp, #4]
 800479e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80047a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80047a6:	4259      	negs	r1, r3
 80047a8:	4159      	adcs	r1, r3
 80047aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047ae:	e7eb      	b.n	8004788 <__swhatbuf_r+0x24>

080047b0 <__smakebuf_r>:
 80047b0:	898b      	ldrh	r3, [r1, #12]
 80047b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b4:	079d      	lsls	r5, r3, #30
 80047b6:	4606      	mov	r6, r0
 80047b8:	460c      	mov	r4, r1
 80047ba:	d507      	bpl.n	80047cc <__smakebuf_r+0x1c>
 80047bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	6123      	str	r3, [r4, #16]
 80047c4:	2301      	movs	r3, #1
 80047c6:	6163      	str	r3, [r4, #20]
 80047c8:	b003      	add	sp, #12
 80047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047cc:	ab01      	add	r3, sp, #4
 80047ce:	466a      	mov	r2, sp
 80047d0:	f7ff ffc8 	bl	8004764 <__swhatbuf_r>
 80047d4:	9f00      	ldr	r7, [sp, #0]
 80047d6:	4605      	mov	r5, r0
 80047d8:	4639      	mov	r1, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	f7ff fbbc 	bl	8003f58 <_malloc_r>
 80047e0:	b948      	cbnz	r0, 80047f6 <__smakebuf_r+0x46>
 80047e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e6:	059a      	lsls	r2, r3, #22
 80047e8:	d4ee      	bmi.n	80047c8 <__smakebuf_r+0x18>
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	f043 0302 	orr.w	r3, r3, #2
 80047f2:	81a3      	strh	r3, [r4, #12]
 80047f4:	e7e2      	b.n	80047bc <__smakebuf_r+0xc>
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	6020      	str	r0, [r4, #0]
 80047fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	9b01      	ldr	r3, [sp, #4]
 8004802:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004806:	b15b      	cbz	r3, 8004820 <__smakebuf_r+0x70>
 8004808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800480c:	4630      	mov	r0, r6
 800480e:	f000 f81d 	bl	800484c <_isatty_r>
 8004812:	b128      	cbz	r0, 8004820 <__smakebuf_r+0x70>
 8004814:	89a3      	ldrh	r3, [r4, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	81a3      	strh	r3, [r4, #12]
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	431d      	orrs	r5, r3
 8004824:	81a5      	strh	r5, [r4, #12]
 8004826:	e7cf      	b.n	80047c8 <__smakebuf_r+0x18>

08004828 <_fstat_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4d07      	ldr	r5, [pc, #28]	@ (8004848 <_fstat_r+0x20>)
 800482c:	2300      	movs	r3, #0
 800482e:	4604      	mov	r4, r0
 8004830:	4608      	mov	r0, r1
 8004832:	4611      	mov	r1, r2
 8004834:	602b      	str	r3, [r5, #0]
 8004836:	f7fc f97b 	bl	8000b30 <_fstat>
 800483a:	1c43      	adds	r3, r0, #1
 800483c:	d102      	bne.n	8004844 <_fstat_r+0x1c>
 800483e:	682b      	ldr	r3, [r5, #0]
 8004840:	b103      	cbz	r3, 8004844 <_fstat_r+0x1c>
 8004842:	6023      	str	r3, [r4, #0]
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop
 8004848:	20000274 	.word	0x20000274

0800484c <_isatty_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4d06      	ldr	r5, [pc, #24]	@ (8004868 <_isatty_r+0x1c>)
 8004850:	2300      	movs	r3, #0
 8004852:	4604      	mov	r4, r0
 8004854:	4608      	mov	r0, r1
 8004856:	602b      	str	r3, [r5, #0]
 8004858:	f7fc f97a 	bl	8000b50 <_isatty>
 800485c:	1c43      	adds	r3, r0, #1
 800485e:	d102      	bne.n	8004866 <_isatty_r+0x1a>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	b103      	cbz	r3, 8004866 <_isatty_r+0x1a>
 8004864:	6023      	str	r3, [r4, #0]
 8004866:	bd38      	pop	{r3, r4, r5, pc}
 8004868:	20000274 	.word	0x20000274

0800486c <_sbrk_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4d06      	ldr	r5, [pc, #24]	@ (8004888 <_sbrk_r+0x1c>)
 8004870:	2300      	movs	r3, #0
 8004872:	4604      	mov	r4, r0
 8004874:	4608      	mov	r0, r1
 8004876:	602b      	str	r3, [r5, #0]
 8004878:	f7fc f982 	bl	8000b80 <_sbrk>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d102      	bne.n	8004886 <_sbrk_r+0x1a>
 8004880:	682b      	ldr	r3, [r5, #0]
 8004882:	b103      	cbz	r3, 8004886 <_sbrk_r+0x1a>
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	bd38      	pop	{r3, r4, r5, pc}
 8004888:	20000274 	.word	0x20000274

0800488c <_init>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr

08004898 <_fini>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr
